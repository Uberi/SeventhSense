;  LST file generated by mikroListExporter - v.2.0 
; Date/Time: 8/12/2014 10:38:12 PM
;----------------------------------------------

;Address Opcode 	ASM
0x0000	0xF004EFC5  	GOTO        2442
_interrupt:
;Controller.c,182 :: 		void interrupt(){
0x0008	0xF016C000  	MOVFF       R0, 22
0x000C	0xF015C001  	MOVFF       R1, 21
;Controller.c,183 :: 		if (TMR1IF_bit){
0x0010	0xA09E      	BTFSS       TMR1IF_bit, BitPos(TMR1IF_bit+0) 
0x0012	0xD02A      	BRA         L_interrupt51
;Controller.c,185 :: 		TMR1IF_bit = 0;
0x0014	0x909E      	BCF         TMR1IF_bit, BitPos(TMR1IF_bit+0) 
;Controller.c,186 :: 		TMR1H = 0x48;
0x0016	0x0E48      	MOVLW       72
0x0018	0x6ECF      	MOVWF       TMR1H 
;Controller.c,187 :: 		TMR1L = 0xE5;
0x001A	0x0EE5      	MOVLW       229
0x001C	0x6ECE      	MOVWF       TMR1L 
;Controller.c,189 :: 		if (magnetometer_uninitialized) {
0x001E	0x521D      	MOVF        Controller_magnetometer_uninitialized, 1 
0x0020	0xE003      	BZ          L_interrupt52
;Controller.c,190 :: 		init_magnetometer(); // configure magnetometer to take readings every second
0x0022	0xD8AE      	RCALL       _init_magnetometer
;Controller.c,191 :: 		magnetometer_uninitialized = 0;
0x0024	0x6A1D      	CLRF        Controller_magnetometer_uninitialized 
;Controller.c,192 :: 		}
0x0026	0xD020      	BRA         L_interrupt53
L_interrupt52:
;Controller.c,194 :: 		get_magnetometer(&magnetic_x, &magnetic_y, &magnetic_z);
0x0028	0x0E17      	MOVLW       _magnetic_x
0x002A	0x6E26      	MOVWF       FARG_get_magnetometer_x 
0x002C	0x0E00      	MOVLW       hi_addr(_magnetic_x)
0x002E	0x6E27      	MOVWF       FARG_get_magnetometer_x+1 
0x0030	0x0E19      	MOVLW       _magnetic_y
0x0032	0x6E28      	MOVWF       FARG_get_magnetometer_y 
0x0034	0x0E00      	MOVLW       hi_addr(_magnetic_y)
0x0036	0x6E29      	MOVWF       FARG_get_magnetometer_y+1 
0x0038	0x0E1B      	MOVLW       _magnetic_z
0x003A	0x6E2A      	MOVWF       FARG_get_magnetometer_z 
0x003C	0x0E00      	MOVLW       hi_addr(_magnetic_z)
0x003E	0x6E2B      	MOVWF       FARG_get_magnetometer_z+1 
0x0040	0xF004EC5B  	CALL        _get_magnetometer, 0
;Controller.c,195 :: 		notify(get_direction(magnetic_x, magnetic_y, magnetic_z));
0x0044	0xF026C017  	MOVFF       _magnetic_x, FARG_get_direction_x
0x0048	0xF027C018  	MOVFF       _magnetic_x+1, FARG_get_direction_x+1
0x004C	0xF028C019  	MOVFF       _magnetic_y, FARG_get_direction_y
0x0050	0xF029C01A  	MOVFF       _magnetic_y+1, FARG_get_direction_y+1
0x0054	0xF02AC01B  	MOVFF       _magnetic_z, FARG_get_direction_z
0x0058	0xF02BC01C  	MOVFF       _magnetic_z+1, FARG_get_direction_z+1
0x005C	0xD935      	RCALL       _get_direction
0x005E	0xF026C000  	MOVFF       R0, FARG_notify_index
0x0062	0x0E00      	MOVLW       0
0x0064	0x6E27      	MOVWF       FARG_notify_index+1 
0x0066	0xD8A4      	RCALL       _notify
;Controller.c,196 :: 		}
L_interrupt53:
;Controller.c,197 :: 		}
L_interrupt51:
;Controller.c,198 :: 		}
L_end_interrupt:
L__interrupt115:
0x0068	0xF000C016  	MOVFF       22, R0
0x006C	0xF001C015  	MOVFF       21, R1
0x0070	0x0011      	RETFIE      1
; end of _interrupt
_I2C1_Is_Idle:
;__Lib_I2C_b46.c,33 :: 		
;__Lib_I2C_b46.c,34 :: 		
0x0072	0xB4C7      	BTFSC       SSPSTAT, 2 
0x0074	0xD009      	BRA         L_I2C1_Is_Idle0
;__Lib_I2C_b46.c,35 :: 		
0x0076	0x0E1F      	MOVLW       31
0x0078	0x14C5      	ANDWF       SSPCON2, 0 
0x007A	0x6E01      	MOVWF       R1 
0x007C	0x5001      	MOVF        R1, 0 
0x007E	0x0A00      	XORLW       0
0x0080	0xE103      	BNZ         L_I2C1_Is_Idle1
;__Lib_I2C_b46.c,36 :: 		
0x0082	0x0E01      	MOVLW       1
0x0084	0x6E00      	MOVWF       R0 
0x0086	0xD001      	BRA         L_end_I2C1_Is_Idle
L_I2C1_Is_Idle1:
L_I2C1_Is_Idle0:
;__Lib_I2C_b46.c,37 :: 		
0x0088	0x6A00      	CLRF        R0 
;__Lib_I2C_b46.c,38 :: 		
L_end_I2C1_Is_Idle:
0x008A	0x0012      	RETURN      0
; end of _I2C1_Is_Idle
_I2C1_Wr:
;__Lib_I2C_b46.c,88 :: 		
;__Lib_I2C_b46.c,90 :: 		
0x008C	0x969E      	BCF         PIR1, 3 
;__Lib_I2C_b46.c,91 :: 		
0x008E	0xFFC9C030  	MOVFF       FARG_I2C1_Wr_data_, SSPBUF
;__Lib_I2C_b46.c,93 :: 		
L_I2C1_Wr18:
0x0092	0xA4C7      	BTFSS       SSPSTAT, 2 
0x0094	0xD001      	BRA         L_I2C1_Wr19
;__Lib_I2C_b46.c,94 :: 		
0x0096	0xD7FD      	BRA         L_I2C1_Wr18
L_I2C1_Wr19:
;__Lib_I2C_b46.c,96 :: 		
L_I2C1_Wr20:
0x0098	0xB69E      	BTFSC       PIR1, 3 
0x009A	0xD001      	BRA         L_I2C1_Wr21
;__Lib_I2C_b46.c,97 :: 		
0x009C	0xD7FD      	BRA         L_I2C1_Wr20
L_I2C1_Wr21:
;__Lib_I2C_b46.c,99 :: 		
0x009E	0xBCC5      	BTFSC       SSPCON2, 6 
0x00A0	0xD002      	BRA         L_I2C1_Wr22
;__Lib_I2C_b46.c,100 :: 		
0x00A2	0x6A00      	CLRF        R0 
0x00A4	0xD003      	BRA         L_end_I2C1_Wr
;__Lib_I2C_b46.c,101 :: 		
L_I2C1_Wr22:
;__Lib_I2C_b46.c,103 :: 		
0x00A6	0x84C5      	BSF         SSPCON2, 2 
;__Lib_I2C_b46.c,104 :: 		
0x00A8	0x0E02      	MOVLW       2
0x00AA	0x6E00      	MOVWF       R0 
;__Lib_I2C_b46.c,106 :: 		
L_end_I2C1_Wr:
0x00AC	0x0012      	RETURN      0
; end of _I2C1_Wr
_I2C1_Stop:
;__Lib_I2C_b46.c,109 :: 		
;__Lib_I2C_b46.c,110 :: 		
0x00AE	0x84C5      	BSF         SSPCON2, 2 
;__Lib_I2C_b46.c,111 :: 		
L_end_I2C1_Stop:
0x00B0	0x0012      	RETURN      0
; end of _I2C1_Stop
_I2C1_Rd:
;__Lib_I2C_b46.c,64 :: 		
;__Lib_I2C_b46.c,67 :: 		
0x00B2	0x969E      	BCF         PIR1, 3 
;__Lib_I2C_b46.c,69 :: 		
0x00B4	0x86C5      	BSF         SSPCON2, 3 
;__Lib_I2C_b46.c,71 :: 		
L_I2C1_Rd12:
0x00B6	0xB69E      	BTFSC       PIR1, 3 
0x00B8	0xD001      	BRA         L_I2C1_Rd13
;__Lib_I2C_b46.c,72 :: 		
0x00BA	0xD7FD      	BRA         L_I2C1_Rd12
L_I2C1_Rd13:
;__Lib_I2C_b46.c,74 :: 		
0x00BC	0xF001CFC9  	MOVFF       SSPBUF, R1
;__Lib_I2C_b46.c,75 :: 		
0x00C0	0x5030      	MOVF        FARG_I2C1_Rd_ack, 0 
0x00C2	0x0A00      	XORLW       0
0x00C4	0xE102      	BNZ         L_I2C1_Rd14
;__Lib_I2C_b46.c,76 :: 		
0x00C6	0x8AC5      	BSF         SSPCON2, 5 
0x00C8	0xD001      	BRA         L_I2C1_Rd15
L_I2C1_Rd14:
;__Lib_I2C_b46.c,78 :: 		
0x00CA	0x9AC5      	BCF         SSPCON2, 5 
L_I2C1_Rd15:
;__Lib_I2C_b46.c,80 :: 		
0x00CC	0x969E      	BCF         PIR1, 3 
;__Lib_I2C_b46.c,81 :: 		
0x00CE	0x88C5      	BSF         SSPCON2, 4 
;__Lib_I2C_b46.c,82 :: 		
L_I2C1_Rd16:
0x00D0	0xB69E      	BTFSC       PIR1, 3 
0x00D2	0xD001      	BRA         L_I2C1_Rd17
;__Lib_I2C_b46.c,83 :: 		
0x00D4	0xD7FD      	BRA         L_I2C1_Rd16
L_I2C1_Rd17:
;__Lib_I2C_b46.c,85 :: 		
0x00D6	0xF000C001  	MOVFF       R1, R0
;__Lib_I2C_b46.c,86 :: 		
L_end_I2C1_Rd:
0x00DA	0x0012      	RETURN      0
; end of _I2C1_Rd
_I2C1_Init:
;__Lib_I2C_b46.c,8 :: 		
;__Lib_I2C_b46.c,15 :: 		
0x00DC	0x9893      	BCF         TRISB4_bit, BitPos(TRISB4_bit+0) 
;__Lib_I2C_b46.c,16 :: 		
0x00DE	0x9C93      	BCF         TRISB6_bit, BitPos(TRISB6_bit+0) 
;__Lib_I2C_b46.c,19 :: 		
0x00E0	0x988A      	BCF         LATB4_bit, BitPos(LATB4_bit+0) 
;__Lib_I2C_b46.c,20 :: 		
0x00E2	0x9C8A      	BCF         LATB6_bit, BitPos(LATB6_bit+0) 
;__Lib_I2C_b46.c,23 :: 		
0x00E4	0x8893      	BSF         TRISB4_bit, BitPos(TRISB4_bit+0) 
;__Lib_I2C_b46.c,24 :: 		
0x00E6	0x8C93      	BSF         TRISB6_bit, BitPos(TRISB6_bit+0) 
;__Lib_I2C_b46.c,26 :: 		
0x00E8	0x9EC7      	BCF         SSPSTAT, 7 
;__Lib_I2C_b46.c,27 :: 		
0x00EA	0x9CC7      	BCF         SSPSTAT, 6 
;__Lib_I2C_b46.c,28 :: 		
0x00EC	0x0E38      	MOVLW       56
0x00EE	0x6EC6      	MOVWF       SSPCON1 
;__Lib_I2C_b46.c,31 :: 		
L_end_I2C1_Init:
0x00F0	0x0012      	RETURN      0
; end of _I2C1_Init
_Mul_32x32_U:
;__Lib_Math.c,1616 :: 		
;__Lib_Math.c,1631 :: 		
0x00F2	0x0E22      	MOVLW       34
;__Lib_Math.c,1632 :: 		
0x00F4	0x6E0C      	MOVWF       R12, 0
;__Lib_Math.c,1633 :: 		
0x00F6	0x6A08      	CLRF        R8, 0
;__Lib_Math.c,1634 :: 		
0x00F8	0x6A09      	CLRF        R9, 0
;__Lib_Math.c,1635 :: 		
0x00FA	0x6A0A      	CLRF        R10, 0
;__Lib_Math.c,1636 :: 		
0x00FC	0x6A0B      	CLRF        R11, 0
;__Lib_Math.c,1638 :: 		
_NEXT:
;__Lib_Math.c,1642 :: 		
0x00FE	0x060C      	DECF        R12, 1, 0
;__Lib_Math.c,1643 :: 		
0x0100	0xB4D8      	BTFSC       STATUS, 2, 0
;__Lib_Math.c,1644 :: 		
0x0102	0xD01F      	BRA         _EXIT2
;__Lib_Math.c,1645 :: 		
0x0104	0x90D8      	BCF         STATUS, 0, 0
;__Lib_Math.c,1647 :: 		
_LOOP:
;__Lib_Math.c,1656 :: 		
0x0106	0x320B      	RRCF        R11, 1, 0
;__Lib_Math.c,1657 :: 		
0x0108	0x320A      	RRCF        R10, 1, 0
;__Lib_Math.c,1658 :: 		
0x010A	0x3209      	RRCF        R9, 1, 0
;__Lib_Math.c,1659 :: 		
0x010C	0x3208      	RRCF        R8, 1, 0
;__Lib_Math.c,1660 :: 		
0x010E	0x3203      	RRCF        R3, 1, 0
;__Lib_Math.c,1661 :: 		
0x0110	0x3202      	RRCF        R2, 1, 0
;__Lib_Math.c,1662 :: 		
0x0112	0x3201      	RRCF        R1, 1, 0
;__Lib_Math.c,1663 :: 		
0x0114	0x3200      	RRCF        R0, 1, 0
;__Lib_Math.c,1668 :: 		
0x0116	0xA0D8      	BTFSS       STATUS, 0, 0
;__Lib_Math.c,1669 :: 		
0x0118	0xD7F2      	BRA         _NEXT
;__Lib_Math.c,1670 :: 		
0x011A	0x060C      	DECF        R12, 1, 0
;__Lib_Math.c,1671 :: 		
0x011C	0xB4D8      	BTFSC       STATUS, 2, 0
;__Lib_Math.c,1672 :: 		
0x011E	0xD009      	BRA         _EXIT1
;__Lib_Math.c,1679 :: 		
0x0120	0x5004      	MOVF        R4, 0, 0
;__Lib_Math.c,1680 :: 		
0x0122	0x2608      	ADDWF       R8, 1, 0
;__Lib_Math.c,1681 :: 		
0x0124	0x5005      	MOVF        R5, 0, 0
;__Lib_Math.c,1684 :: 		
0x0126	0x2209      	ADDWFC      R9, 1, 0
;__Lib_Math.c,1685 :: 		
0x0128	0x5006      	MOVF        R6, 0, 0
;__Lib_Math.c,1688 :: 		
0x012A	0x220A      	ADDWFC      R10, 1, 0
;__Lib_Math.c,1689 :: 		
0x012C	0x5007      	MOVF        R7, 0, 0
;__Lib_Math.c,1692 :: 		
0x012E	0x220B      	ADDWFC      R11, 1, 0
;__Lib_Math.c,1694 :: 		
0x0130	0xD7EA      	BRA         _LOOP
;__Lib_Math.c,1696 :: 		
_EXIT1:
;__Lib_Math.c,1701 :: 		
0x0132	0x5004      	MOVF        R4, 0, 0
;__Lib_Math.c,1702 :: 		
0x0134	0x2608      	ADDWF       R8, 1, 0
;__Lib_Math.c,1703 :: 		
0x0136	0x5005      	MOVF        R5, 0, 0
;__Lib_Math.c,1706 :: 		
0x0138	0x2209      	ADDWFC      R9, 1, 0
;__Lib_Math.c,1707 :: 		
0x013A	0x5006      	MOVF        R6, 0, 0
;__Lib_Math.c,1710 :: 		
0x013C	0x220A      	ADDWFC      R10, 1, 0
;__Lib_Math.c,1711 :: 		
0x013E	0x5007      	MOVF        R7, 0, 0
;__Lib_Math.c,1714 :: 		
0x0140	0x220B      	ADDWFC      R11, 1, 0
;__Lib_Math.c,1717 :: 		
_EXIT2:
;__Lib_Math.c,1719 :: 		
L_end_Mul_32x32_U:
0x0142	0x0012      	RETURN      0
; end of _Mul_32x32_U
_I2C1_Start:
;__Lib_I2C_b46.c,40 :: 		
;__Lib_I2C_b46.c,43 :: 		
0x0144	0x6A30      	CLRF        I2C1_Start_j_L0 
0x0146	0x6A31      	CLRF        I2C1_Start_j_L0+1 
L_I2C1_Start2:
0x0148	0x5031      	MOVF        I2C1_Start_j_L0+1, 0 
0x014A	0x0812      	SUBLW       18
0x014C	0xE102      	BNZ         L__I2C1_Start27
0x014E	0x5030      	MOVF        I2C1_Start_j_L0, 0 
0x0150	0x088E      	SUBLW       142
L__I2C1_Start27:
0x0152	0xE307      	BNC         L_I2C1_Start3
;__Lib_I2C_b46.c,44 :: 		
0x0154	0xDF8E      	RCALL       _I2C1_Is_Idle
0x0156	0x5200      	MOVF        R0, 1 
0x0158	0xE001      	BZ          L_I2C1_Start5
;__Lib_I2C_b46.c,45 :: 		
0x015A	0xD003      	BRA         L_I2C1_Start3
L_I2C1_Start5:
;__Lib_I2C_b46.c,43 :: 		
0x015C	0x4A30      	INFSNZ      I2C1_Start_j_L0, 1 
0x015E	0x2A31      	INCF        I2C1_Start_j_L0+1, 1 
;__Lib_I2C_b46.c,46 :: 		
0x0160	0xD7F3      	BRA         L_I2C1_Start2
L_I2C1_Start3:
;__Lib_I2C_b46.c,48 :: 		
0x0162	0x0E12      	MOVLW       18
0x0164	0x5C31      	SUBWF       I2C1_Start_j_L0+1, 0 
0x0166	0xE102      	BNZ         L__I2C1_Start28
0x0168	0x0E8F      	MOVLW       143
0x016A	0x5C30      	SUBWF       I2C1_Start_j_L0, 0 
L__I2C1_Start28:
0x016C	0xE303      	BNC         L_I2C1_Start6
;__Lib_I2C_b46.c,49 :: 		
0x016E	0x0E7B      	MOVLW       123
0x0170	0x6E00      	MOVWF       R0 
0x0172	0xD005      	BRA         L_end_I2C1_Start
L_I2C1_Start6:
;__Lib_I2C_b46.c,51 :: 		
0x0174	0x80C5      	BSF         SSPCON2, 0 
;__Lib_I2C_b46.c,52 :: 		
L_I2C1_Start8:
0x0176	0xA0C5      	BTFSS       SSPCON2, 0 
0x0178	0xD001      	BRA         L_I2C1_Start9
;__Lib_I2C_b46.c,53 :: 		
0x017A	0xD7FD      	BRA         L_I2C1_Start8
L_I2C1_Start9:
;__Lib_I2C_b46.c,54 :: 		
0x017C	0x6A00      	CLRF        R0 
;__Lib_I2C_b46.c,56 :: 		
L_end_I2C1_Start:
0x017E	0x0012      	RETURN      0
; end of _I2C1_Start
_init_magnetometer:
;Controller.c,49 :: 		void init_magnetometer() {
;Controller.c,50 :: 		TRISB = 0x00; // PORTB as output (required for I2C to work)
0x0180	0x6A93      	CLRF        TRISB 
;Controller.c,51 :: 		PORTB = 0x00; // initialize PORTB to 0 for I2C
0x0182	0x6A81      	CLRF        PORTB 
;Controller.c,53 :: 		I2C1_Init(100000); // start the I2C communication channel in standard mode (100 kbps)
0x0184	0x0E02      	MOVLW       2
0x0186	0x6EC8      	MOVWF       SSPADD 
0x0188	0xDFA9      	RCALL       _I2C1_Init
;Controller.c,55 :: 		I2C1_Start();
0x018A	0xDFDC      	RCALL       _I2C1_Start
;Controller.c,56 :: 		I2C1_Wr(MAGNETOMETER_WRITE); // write to magnetometer
0x018C	0x0E3C      	MOVLW       60
0x018E	0x6E30      	MOVWF       FARG_I2C1_Wr_data_ 
0x0190	0xDF7D      	RCALL       _I2C1_Wr
;Controller.c,57 :: 		I2C1_Wr(0x00); // write to configuration A register
0x0192	0x6A30      	CLRF        FARG_I2C1_Wr_data_ 
0x0194	0xDF7B      	RCALL       _I2C1_Wr
;Controller.c,58 :: 		I2C1_Wr(0b01110000); // average 8 samples
0x0196	0x0E70      	MOVLW       112
0x0198	0x6E30      	MOVWF       FARG_I2C1_Wr_data_ 
0x019A	0xDF78      	RCALL       _I2C1_Wr
;Controller.c,59 :: 		I2C1_Stop();
0x019C	0xDF88      	RCALL       _I2C1_Stop
;Controller.c,60 :: 		}
L_end_init_magnetometer:
0x019E	0x0012      	RETURN      0
; end of _init_magnetometer
___CC2DW:
;__Lib_System.c,21 :: 		
;__Lib_System.c,23 :: 		
_CC2DL_Loop1:
;__Lib_System.c,24 :: 		
0x01A0	0x0009      	TBLRD*+
;__Lib_System.c,25 :: 		
0x01A2	0xFFE6CFF5  	MOVFF       TABLAT, POSTINC1
;__Lib_System.c,26 :: 		
0x01A6	0x0600      	DECF        R0, 1, 0
;__Lib_System.c,27 :: 		
0x01A8	0xE1FB      	BNZ         _CC2DL_Loop1
;__Lib_System.c,28 :: 		
0x01AA	0x0601      	DECF        R1, 1, 0
;__Lib_System.c,29 :: 		
0x01AC	0xE1F9      	BNZ         _CC2DL_Loop1
;__Lib_System.c,31 :: 		
L_end___CC2DW:
0x01AE	0x0012      	RETURN      0
; end of ___CC2DW
_notify:
;Controller.c,108 :: 		void notify(int index) {
;Controller.c,109 :: 		switch (index) {
0x01B0	0xD010      	BRA         L_notify1
;Controller.c,110 :: 		case 1: MOTOR1 = 1; break;
L_notify3:
0x01B2	0x8E82      	BSF         RC7_bit, BitPos(RC7_bit+0) 
0x01B4	0xD03E      	BRA         L_notify2
;Controller.c,111 :: 		case 2: MOTOR2 = 1; break;
L_notify4:
0x01B6	0x8C82      	BSF         RC6_bit, BitPos(RC6_bit+0) 
0x01B8	0xD03C      	BRA         L_notify2
;Controller.c,112 :: 		case 3: MOTOR3 = 1; break;
L_notify5:
0x01BA	0x8682      	BSF         RC3_bit, BitPos(RC3_bit+0) 
0x01BC	0xD03A      	BRA         L_notify2
;Controller.c,113 :: 		case 4: MOTOR4 = 1; break;
L_notify6:
0x01BE	0x8882      	BSF         RC4_bit, BitPos(RC4_bit+0) 
0x01C0	0xD038      	BRA         L_notify2
;Controller.c,114 :: 		case 5: MOTOR5 = 1; break;
L_notify7:
0x01C2	0x8A82      	BSF         RC5_bit, BitPos(RC5_bit+0) 
0x01C4	0xD036      	BRA         L_notify2
;Controller.c,115 :: 		case 6: MOTOR6 = 1; break;
L_notify8:
0x01C6	0x8482      	BSF         RC2_bit, BitPos(RC2_bit+0) 
0x01C8	0xD034      	BRA         L_notify2
;Controller.c,116 :: 		case 7: MOTOR7 = 1; break;
L_notify9:
0x01CA	0x8282      	BSF         RC1_bit, BitPos(RC1_bit+0) 
0x01CC	0xD032      	BRA         L_notify2
;Controller.c,117 :: 		case 8: MOTOR8 = 1; break;
L_notify10:
0x01CE	0x8082      	BSF         RC0_bit, BitPos(RC0_bit+0) 
0x01D0	0xD030      	BRA         L_notify2
;Controller.c,118 :: 		}
L_notify1:
0x01D2	0x0E00      	MOVLW       0
0x01D4	0x1827      	XORWF       FARG_notify_index+1, 0 
0x01D6	0xE102      	BNZ         L__notify74
0x01D8	0x0E01      	MOVLW       1
0x01DA	0x1826      	XORWF       FARG_notify_index, 0 
L__notify74:
0x01DC	0xE0EA      	BZ          L_notify3
0x01DE	0x0E00      	MOVLW       0
0x01E0	0x1827      	XORWF       FARG_notify_index+1, 0 
0x01E2	0xE102      	BNZ         L__notify75
0x01E4	0x0E02      	MOVLW       2
0x01E6	0x1826      	XORWF       FARG_notify_index, 0 
L__notify75:
0x01E8	0xE0E6      	BZ          L_notify4
0x01EA	0x0E00      	MOVLW       0
0x01EC	0x1827      	XORWF       FARG_notify_index+1, 0 
0x01EE	0xE102      	BNZ         L__notify76
0x01F0	0x0E03      	MOVLW       3
0x01F2	0x1826      	XORWF       FARG_notify_index, 0 
L__notify76:
0x01F4	0xE0E2      	BZ          L_notify5
0x01F6	0x0E00      	MOVLW       0
0x01F8	0x1827      	XORWF       FARG_notify_index+1, 0 
0x01FA	0xE102      	BNZ         L__notify77
0x01FC	0x0E04      	MOVLW       4
0x01FE	0x1826      	XORWF       FARG_notify_index, 0 
L__notify77:
0x0200	0xE0DE      	BZ          L_notify6
0x0202	0x0E00      	MOVLW       0
0x0204	0x1827      	XORWF       FARG_notify_index+1, 0 
0x0206	0xE102      	BNZ         L__notify78
0x0208	0x0E05      	MOVLW       5
0x020A	0x1826      	XORWF       FARG_notify_index, 0 
L__notify78:
0x020C	0xE0DA      	BZ          L_notify7
0x020E	0x0E00      	MOVLW       0
0x0210	0x1827      	XORWF       FARG_notify_index+1, 0 
0x0212	0xE102      	BNZ         L__notify79
0x0214	0x0E06      	MOVLW       6
0x0216	0x1826      	XORWF       FARG_notify_index, 0 
L__notify79:
0x0218	0xE0D6      	BZ          L_notify8
0x021A	0x0E00      	MOVLW       0
0x021C	0x1827      	XORWF       FARG_notify_index+1, 0 
0x021E	0xE102      	BNZ         L__notify80
0x0220	0x0E07      	MOVLW       7
0x0222	0x1826      	XORWF       FARG_notify_index, 0 
L__notify80:
0x0224	0xE0D2      	BZ          L_notify9
0x0226	0x0E00      	MOVLW       0
0x0228	0x1827      	XORWF       FARG_notify_index+1, 0 
0x022A	0xE102      	BNZ         L__notify81
0x022C	0x0E08      	MOVLW       8
0x022E	0x1826      	XORWF       FARG_notify_index, 0 
L__notify81:
0x0230	0xE0CE      	BZ          L_notify10
L_notify2:
;Controller.c,119 :: 		delay_ms(200);
0x0232	0x0E41      	MOVLW       65
0x0234	0x6E0C      	MOVWF       R12, 0
0x0236	0x0EEE      	MOVLW       238
0x0238	0x6E0D      	MOVWF       R13, 0
L_notify11:
0x023A	0x2E0D      	DECFSZ      R13, 1, 0
0x023C	0xD7FE      	BRA         L_notify11
0x023E	0x2E0C      	DECFSZ      R12, 1, 0
0x0240	0xD7FC      	BRA         L_notify11
0x0242	0x0000      	NOP
;Controller.c,120 :: 		switch (index) {
0x0244	0xD010      	BRA         L_notify12
;Controller.c,121 :: 		case 1: MOTOR1 = 0; break;
L_notify14:
0x0246	0x9E82      	BCF         RC7_bit, BitPos(RC7_bit+0) 
0x0248	0xD03E      	BRA         L_notify13
;Controller.c,122 :: 		case 2: MOTOR2 = 0; break;
L_notify15:
0x024A	0x9C82      	BCF         RC6_bit, BitPos(RC6_bit+0) 
0x024C	0xD03C      	BRA         L_notify13
;Controller.c,123 :: 		case 3: MOTOR3 = 0; break;
L_notify16:
0x024E	0x9682      	BCF         RC3_bit, BitPos(RC3_bit+0) 
0x0250	0xD03A      	BRA         L_notify13
;Controller.c,124 :: 		case 4: MOTOR4 = 0; break;
L_notify17:
0x0252	0x9882      	BCF         RC4_bit, BitPos(RC4_bit+0) 
0x0254	0xD038      	BRA         L_notify13
;Controller.c,125 :: 		case 5: MOTOR5 = 0; break;
L_notify18:
0x0256	0x9A82      	BCF         RC5_bit, BitPos(RC5_bit+0) 
0x0258	0xD036      	BRA         L_notify13
;Controller.c,126 :: 		case 6: MOTOR6 = 0; break;
L_notify19:
0x025A	0x9482      	BCF         RC2_bit, BitPos(RC2_bit+0) 
0x025C	0xD034      	BRA         L_notify13
;Controller.c,127 :: 		case 7: MOTOR7 = 0; break;
L_notify20:
0x025E	0x9282      	BCF         RC1_bit, BitPos(RC1_bit+0) 
0x0260	0xD032      	BRA         L_notify13
;Controller.c,128 :: 		case 8: MOTOR8 = 0; break;
L_notify21:
0x0262	0x9082      	BCF         RC0_bit, BitPos(RC0_bit+0) 
0x0264	0xD030      	BRA         L_notify13
;Controller.c,129 :: 		}
L_notify12:
0x0266	0x0E00      	MOVLW       0
0x0268	0x1827      	XORWF       FARG_notify_index+1, 0 
0x026A	0xE102      	BNZ         L__notify82
0x026C	0x0E01      	MOVLW       1
0x026E	0x1826      	XORWF       FARG_notify_index, 0 
L__notify82:
0x0270	0xE0EA      	BZ          L_notify14
0x0272	0x0E00      	MOVLW       0
0x0274	0x1827      	XORWF       FARG_notify_index+1, 0 
0x0276	0xE102      	BNZ         L__notify83
0x0278	0x0E02      	MOVLW       2
0x027A	0x1826      	XORWF       FARG_notify_index, 0 
L__notify83:
0x027C	0xE0E6      	BZ          L_notify15
0x027E	0x0E00      	MOVLW       0
0x0280	0x1827      	XORWF       FARG_notify_index+1, 0 
0x0282	0xE102      	BNZ         L__notify84
0x0284	0x0E03      	MOVLW       3
0x0286	0x1826      	XORWF       FARG_notify_index, 0 
L__notify84:
0x0288	0xE0E2      	BZ          L_notify16
0x028A	0x0E00      	MOVLW       0
0x028C	0x1827      	XORWF       FARG_notify_index+1, 0 
0x028E	0xE102      	BNZ         L__notify85
0x0290	0x0E04      	MOVLW       4
0x0292	0x1826      	XORWF       FARG_notify_index, 0 
L__notify85:
0x0294	0xE0DE      	BZ          L_notify17
0x0296	0x0E00      	MOVLW       0
0x0298	0x1827      	XORWF       FARG_notify_index+1, 0 
0x029A	0xE102      	BNZ         L__notify86
0x029C	0x0E05      	MOVLW       5
0x029E	0x1826      	XORWF       FARG_notify_index, 0 
L__notify86:
0x02A0	0xE0DA      	BZ          L_notify18
0x02A2	0x0E00      	MOVLW       0
0x02A4	0x1827      	XORWF       FARG_notify_index+1, 0 
0x02A6	0xE102      	BNZ         L__notify87
0x02A8	0x0E06      	MOVLW       6
0x02AA	0x1826      	XORWF       FARG_notify_index, 0 
L__notify87:
0x02AC	0xE0D6      	BZ          L_notify19
0x02AE	0x0E00      	MOVLW       0
0x02B0	0x1827      	XORWF       FARG_notify_index+1, 0 
0x02B2	0xE102      	BNZ         L__notify88
0x02B4	0x0E07      	MOVLW       7
0x02B6	0x1826      	XORWF       FARG_notify_index, 0 
L__notify88:
0x02B8	0xE0D2      	BZ          L_notify20
0x02BA	0x0E00      	MOVLW       0
0x02BC	0x1827      	XORWF       FARG_notify_index+1, 0 
0x02BE	0xE102      	BNZ         L__notify89
0x02C0	0x0E08      	MOVLW       8
0x02C2	0x1826      	XORWF       FARG_notify_index, 0 
L__notify89:
0x02C4	0xE0CE      	BZ          L_notify21
L_notify13:
;Controller.c,130 :: 		}
L_end_notify:
0x02C6	0x0012      	RETURN      0
; end of _notify
_get_direction:
;Controller.c,133 :: 		char get_direction(int x, int y, int z) {
;Controller.c,136 :: 		|| y == MAGNETOMETER_OVERFLOW
0x02C8	0x5027      	MOVF        FARG_get_direction_x+1, 0 
0x02CA	0x0AF0      	XORLW       240
0x02CC	0xE102      	BNZ         L__get_direction91
0x02CE	0x0E00      	MOVLW       0
0x02D0	0x1826      	XORWF       FARG_get_direction_x, 0 
L__get_direction91:
0x02D2	0xE00D      	BZ          L__get_direction58
0x02D4	0x5029      	MOVF        FARG_get_direction_y+1, 0 
0x02D6	0x0AF0      	XORLW       240
0x02D8	0xE102      	BNZ         L__get_direction92
0x02DA	0x0E00      	MOVLW       0
0x02DC	0x1828      	XORWF       FARG_get_direction_y, 0 
L__get_direction92:
0x02DE	0xE007      	BZ          L__get_direction58
;Controller.c,137 :: 		|| z == MAGNETOMETER_OVERFLOW)
0x02E0	0x502B      	MOVF        FARG_get_direction_z+1, 0 
0x02E2	0x0AF0      	XORLW       240
0x02E4	0xE102      	BNZ         L__get_direction93
0x02E6	0x0E00      	MOVLW       0
0x02E8	0x182A      	XORWF       FARG_get_direction_z, 0 
L__get_direction93:
0x02EA	0xE001      	BZ          L__get_direction58
0x02EC	0xD002      	BRA         L_get_direction24
L__get_direction58:
;Controller.c,138 :: 		return NO_DIRECTION; // unknown index
0x02EE	0x6A00      	CLRF        R0 
0x02F0	0xD2E1      	BRA         L_end_get_direction
L_get_direction24:
;Controller.c,140 :: 		axis_x = (long)x;
0x02F2	0xF001C026  	MOVFF       FARG_get_direction_x, R1
0x02F6	0xF002C027  	MOVFF       FARG_get_direction_x+1, R2
0x02FA	0x0E00      	MOVLW       0
0x02FC	0xBE27      	BTFSC       FARG_get_direction_x+1, 7 
0x02FE	0x0EFF      	MOVLW       255
0x0300	0x6E03      	MOVWF       R3 
0x0302	0x6E04      	MOVWF       R4 
0x0304	0xF01EC001  	MOVFF       R1, Controller_axis_x
0x0308	0xF01FC002  	MOVFF       R2, Controller_axis_x+1
0x030C	0xF020C003  	MOVFF       R3, Controller_axis_x+2
0x0310	0xF021C004  	MOVFF       R4, Controller_axis_x+3
;Controller.c,141 :: 		axis_y = (long)y;
0x0314	0xF022C028  	MOVFF       FARG_get_direction_y, Controller_axis_y
0x0318	0xF023C029  	MOVFF       FARG_get_direction_y+1, Controller_axis_y+1
0x031C	0x0E00      	MOVLW       0
0x031E	0xBE29      	BTFSC       FARG_get_direction_y+1, 7 
0x0320	0x0EFF      	MOVLW       255
0x0322	0x6E24      	MOVWF       Controller_axis_y+2 
0x0324	0x6E25      	MOVWF       Controller_axis_y+3 
;Controller.c,144 :: 		if (axis_x == 0 && axis_y == 0) // no angle
0x0326	0x0E00      	MOVLW       0
0x0328	0x6E00      	MOVWF       R0 
0x032A	0x1804      	XORWF       R4, 0 
0x032C	0xE108      	BNZ         L__get_direction94
0x032E	0x5000      	MOVF        R0, 0 
0x0330	0x1803      	XORWF       R3, 0 
0x0332	0xE105      	BNZ         L__get_direction94
0x0334	0x5000      	MOVF        R0, 0 
0x0336	0x1802      	XORWF       R2, 0 
0x0338	0xE102      	BNZ         L__get_direction94
0x033A	0x5001      	MOVF        R1, 0 
0x033C	0x0A00      	XORLW       0
L__get_direction94:
0x033E	0xE10F      	BNZ         L_get_direction27
0x0340	0x0E00      	MOVLW       0
0x0342	0x6E00      	MOVWF       R0 
0x0344	0x1825      	XORWF       Controller_axis_y+3, 0 
0x0346	0xE108      	BNZ         L__get_direction95
0x0348	0x5000      	MOVF        R0, 0 
0x034A	0x1824      	XORWF       Controller_axis_y+2, 0 
0x034C	0xE105      	BNZ         L__get_direction95
0x034E	0x5000      	MOVF        R0, 0 
0x0350	0x1823      	XORWF       Controller_axis_y+1, 0 
0x0352	0xE102      	BNZ         L__get_direction95
0x0354	0x5022      	MOVF        Controller_axis_y, 0 
0x0356	0x0A00      	XORLW       0
L__get_direction95:
0x0358	0xE102      	BNZ         L_get_direction27
L__get_direction57:
;Controller.c,145 :: 		return NO_DIRECTION;
0x035A	0x6A00      	CLRF        R0 
0x035C	0xD2AB      	BRA         L_end_get_direction
L_get_direction27:
;Controller.c,146 :: 		if (axis_x == 0)
0x035E	0x0E00      	MOVLW       0
0x0360	0x6E00      	MOVWF       R0 
0x0362	0x1821      	XORWF       Controller_axis_x+3, 0 
0x0364	0xE108      	BNZ         L__get_direction96
0x0366	0x5000      	MOVF        R0, 0 
0x0368	0x1820      	XORWF       Controller_axis_x+2, 0 
0x036A	0xE105      	BNZ         L__get_direction96
0x036C	0x5000      	MOVF        R0, 0 
0x036E	0x181F      	XORWF       Controller_axis_x+1, 0 
0x0370	0xE102      	BNZ         L__get_direction96
0x0372	0x501E      	MOVF        Controller_axis_x, 0 
0x0374	0x0A00      	XORLW       0
L__get_direction96:
0x0376	0xE10F      	BNZ         L_get_direction28
;Controller.c,147 :: 		return y < 0 ? SOUTH : NORTH;
0x0378	0x0E80      	MOVLW       128
0x037A	0x1829      	XORWF       FARG_get_direction_y+1, 0 
0x037C	0x6E00      	MOVWF       R0 
0x037E	0x0E80      	MOVLW       128
0x0380	0x5C00      	SUBWF       R0, 0 
0x0382	0xE102      	BNZ         L__get_direction97
0x0384	0x0E00      	MOVLW       0
0x0386	0x5C28      	SUBWF       FARG_get_direction_y, 0 
L__get_direction97:
0x0388	0xE203      	BC          L_get_direction29
0x038A	0x0E05      	MOVLW       5
0x038C	0x6E00      	MOVWF       R0 
0x038E	0xD002      	BRA         L_get_direction30
L_get_direction29:
0x0390	0x0E01      	MOVLW       1
0x0392	0x6E00      	MOVWF       R0 
L_get_direction30:
0x0394	0xD28F      	BRA         L_end_get_direction
L_get_direction28:
;Controller.c,148 :: 		if (axis_y == 0)
0x0396	0x0E00      	MOVLW       0
0x0398	0x6E00      	MOVWF       R0 
0x039A	0x1825      	XORWF       Controller_axis_y+3, 0 
0x039C	0xE108      	BNZ         L__get_direction98
0x039E	0x5000      	MOVF        R0, 0 
0x03A0	0x1824      	XORWF       Controller_axis_y+2, 0 
0x03A2	0xE105      	BNZ         L__get_direction98
0x03A4	0x5000      	MOVF        R0, 0 
0x03A6	0x1823      	XORWF       Controller_axis_y+1, 0 
0x03A8	0xE102      	BNZ         L__get_direction98
0x03AA	0x5022      	MOVF        Controller_axis_y, 0 
0x03AC	0x0A00      	XORLW       0
L__get_direction98:
0x03AE	0xE10F      	BNZ         L_get_direction31
;Controller.c,149 :: 		return x < 0 ? WEST : EAST;
0x03B0	0x0E80      	MOVLW       128
0x03B2	0x1827      	XORWF       FARG_get_direction_x+1, 0 
0x03B4	0x6E00      	MOVWF       R0 
0x03B6	0x0E80      	MOVLW       128
0x03B8	0x5C00      	SUBWF       R0, 0 
0x03BA	0xE102      	BNZ         L__get_direction99
0x03BC	0x0E00      	MOVLW       0
0x03BE	0x5C26      	SUBWF       FARG_get_direction_x, 0 
L__get_direction99:
0x03C0	0xE203      	BC          L_get_direction32
0x03C2	0x0E07      	MOVLW       7
0x03C4	0x6E00      	MOVWF       R0 
0x03C6	0xD002      	BRA         L_get_direction33
L_get_direction32:
0x03C8	0x0E03      	MOVLW       3
0x03CA	0x6E00      	MOVWF       R0 
L_get_direction33:
0x03CC	0xD273      	BRA         L_end_get_direction
L_get_direction31:
;Controller.c,152 :: 		if (axis_x > 0 && axis_y > 0) { // first quadrant
0x03CE	0x0E80      	MOVLW       128
0x03D0	0x6E00      	MOVWF       R0 
0x03D2	0x0E80      	MOVLW       128
0x03D4	0x1821      	XORWF       Controller_axis_x+3, 0 
0x03D6	0x5C00      	SUBWF       R0, 0 
0x03D8	0xE108      	BNZ         L__get_direction100
0x03DA	0x5020      	MOVF        Controller_axis_x+2, 0 
0x03DC	0x0800      	SUBLW       0
0x03DE	0xE105      	BNZ         L__get_direction100
0x03E0	0x501F      	MOVF        Controller_axis_x+1, 0 
0x03E2	0x0800      	SUBLW       0
0x03E4	0xE102      	BNZ         L__get_direction100
0x03E6	0x501E      	MOVF        Controller_axis_x, 0 
0x03E8	0x0800      	SUBLW       0
L__get_direction100:
0x03EA	0xB0D8      	BTFSC       STATUS, 0 
0x03EC	0xD08D      	BRA         L_get_direction36
0x03EE	0x0E80      	MOVLW       128
0x03F0	0x6E00      	MOVWF       R0 
0x03F2	0x0E80      	MOVLW       128
0x03F4	0x1825      	XORWF       Controller_axis_y+3, 0 
0x03F6	0x5C00      	SUBWF       R0, 0 
0x03F8	0xE108      	BNZ         L__get_direction101
0x03FA	0x5024      	MOVF        Controller_axis_y+2, 0 
0x03FC	0x0800      	SUBLW       0
0x03FE	0xE105      	BNZ         L__get_direction101
0x0400	0x5023      	MOVF        Controller_axis_y+1, 0 
0x0402	0x0800      	SUBLW       0
0x0404	0xE102      	BNZ         L__get_direction101
0x0406	0x5022      	MOVF        Controller_axis_y, 0 
0x0408	0x0800      	SUBLW       0
L__get_direction101:
0x040A	0xB0D8      	BTFSC       STATUS, 0 
0x040C	0xD07D      	BRA         L_get_direction36
L__get_direction56:
;Controller.c,153 :: 		if (axis_y * TRIG_SCALE < axis_x * TAN_22_5) // angle less than 22.5 degrees
0x040E	0xF000C022  	MOVFF       Controller_axis_y, R0
0x0412	0xF001C023  	MOVFF       Controller_axis_y+1, R1
0x0416	0xF002C024  	MOVFF       Controller_axis_y+2, R2
0x041A	0xF003C025  	MOVFF       Controller_axis_y+3, R3
0x041E	0x0E10      	MOVLW       16
0x0420	0x6E04      	MOVWF       R4 
0x0422	0x0E27      	MOVLW       39
0x0424	0x6E05      	MOVWF       R5 
0x0426	0x0E00      	MOVLW       0
0x0428	0x6E06      	MOVWF       R6 
0x042A	0x0E00      	MOVLW       0
0x042C	0x6E07      	MOVWF       R7 
0x042E	0xDE61      	RCALL       _Mul_32x32_U
0x0430	0xF02CC000  	MOVFF       R0, FLOC__get_direction
0x0434	0xF02DC001  	MOVFF       R1, FLOC__get_direction+1
0x0438	0xF02EC002  	MOVFF       R2, FLOC__get_direction+2
0x043C	0xF02FC003  	MOVFF       R3, FLOC__get_direction+3
0x0440	0xF000C01E  	MOVFF       Controller_axis_x, R0
0x0444	0xF001C01F  	MOVFF       Controller_axis_x+1, R1
0x0448	0xF002C020  	MOVFF       Controller_axis_x+2, R2
0x044C	0xF003C021  	MOVFF       Controller_axis_x+3, R3
0x0450	0x0E2E      	MOVLW       46
0x0452	0x6E04      	MOVWF       R4 
0x0454	0x0E10      	MOVLW       16
0x0456	0x6E05      	MOVWF       R5 
0x0458	0x0E00      	MOVLW       0
0x045A	0x6E06      	MOVWF       R6 
0x045C	0x0E00      	MOVLW       0
0x045E	0x6E07      	MOVWF       R7 
0x0460	0xDE48      	RCALL       _Mul_32x32_U
0x0462	0x0E80      	MOVLW       128
0x0464	0x182F      	XORWF       FLOC__get_direction+3, 0 
0x0466	0x6E04      	MOVWF       R4 
0x0468	0x0E80      	MOVLW       128
0x046A	0x1803      	XORWF       R3, 0 
0x046C	0x5C04      	SUBWF       R4, 0 
0x046E	0xE108      	BNZ         L__get_direction102
0x0470	0x5002      	MOVF        R2, 0 
0x0472	0x5C2E      	SUBWF       FLOC__get_direction+2, 0 
0x0474	0xE105      	BNZ         L__get_direction102
0x0476	0x5001      	MOVF        R1, 0 
0x0478	0x5C2D      	SUBWF       FLOC__get_direction+1, 0 
0x047A	0xE102      	BNZ         L__get_direction102
0x047C	0x5000      	MOVF        R0, 0 
0x047E	0x5C2C      	SUBWF       FLOC__get_direction, 0 
L__get_direction102:
0x0480	0xE203      	BC          L_get_direction37
;Controller.c,154 :: 		return EAST;
0x0482	0x0E03      	MOVLW       3
0x0484	0x6E00      	MOVWF       R0 
0x0486	0xD216      	BRA         L_end_get_direction
L_get_direction37:
;Controller.c,155 :: 		if (axis_x * TRIG_SCALE < axis_y * TAN_22_5) // angle more than 90 - 22.5 degrees
0x0488	0xF000C01E  	MOVFF       Controller_axis_x, R0
0x048C	0xF001C01F  	MOVFF       Controller_axis_x+1, R1
0x0490	0xF002C020  	MOVFF       Controller_axis_x+2, R2
0x0494	0xF003C021  	MOVFF       Controller_axis_x+3, R3
0x0498	0x0E10      	MOVLW       16
0x049A	0x6E04      	MOVWF       R4 
0x049C	0x0E27      	MOVLW       39
0x049E	0x6E05      	MOVWF       R5 
0x04A0	0x0E00      	MOVLW       0
0x04A2	0x6E06      	MOVWF       R6 
0x04A4	0x0E00      	MOVLW       0
0x04A6	0x6E07      	MOVWF       R7 
0x04A8	0xDE24      	RCALL       _Mul_32x32_U
0x04AA	0xF02CC000  	MOVFF       R0, FLOC__get_direction
0x04AE	0xF02DC001  	MOVFF       R1, FLOC__get_direction+1
0x04B2	0xF02EC002  	MOVFF       R2, FLOC__get_direction+2
0x04B6	0xF02FC003  	MOVFF       R3, FLOC__get_direction+3
0x04BA	0xF000C022  	MOVFF       Controller_axis_y, R0
0x04BE	0xF001C023  	MOVFF       Controller_axis_y+1, R1
0x04C2	0xF002C024  	MOVFF       Controller_axis_y+2, R2
0x04C6	0xF003C025  	MOVFF       Controller_axis_y+3, R3
0x04CA	0x0E2E      	MOVLW       46
0x04CC	0x6E04      	MOVWF       R4 
0x04CE	0x0E10      	MOVLW       16
0x04D0	0x6E05      	MOVWF       R5 
0x04D2	0x0E00      	MOVLW       0
0x04D4	0x6E06      	MOVWF       R6 
0x04D6	0x0E00      	MOVLW       0
0x04D8	0x6E07      	MOVWF       R7 
0x04DA	0xDE0B      	RCALL       _Mul_32x32_U
0x04DC	0x0E80      	MOVLW       128
0x04DE	0x182F      	XORWF       FLOC__get_direction+3, 0 
0x04E0	0x6E04      	MOVWF       R4 
0x04E2	0x0E80      	MOVLW       128
0x04E4	0x1803      	XORWF       R3, 0 
0x04E6	0x5C04      	SUBWF       R4, 0 
0x04E8	0xE108      	BNZ         L__get_direction103
0x04EA	0x5002      	MOVF        R2, 0 
0x04EC	0x5C2E      	SUBWF       FLOC__get_direction+2, 0 
0x04EE	0xE105      	BNZ         L__get_direction103
0x04F0	0x5001      	MOVF        R1, 0 
0x04F2	0x5C2D      	SUBWF       FLOC__get_direction+1, 0 
0x04F4	0xE102      	BNZ         L__get_direction103
0x04F6	0x5000      	MOVF        R0, 0 
0x04F8	0x5C2C      	SUBWF       FLOC__get_direction, 0 
L__get_direction103:
0x04FA	0xE203      	BC          L_get_direction38
;Controller.c,156 :: 		return NORTH;
0x04FC	0x0E01      	MOVLW       1
0x04FE	0x6E00      	MOVWF       R0 
0x0500	0xD1D9      	BRA         L_end_get_direction
L_get_direction38:
;Controller.c,157 :: 		return NORTHEAST;
0x0502	0x0E02      	MOVLW       2
0x0504	0x6E00      	MOVWF       R0 
0x0506	0xD1D6      	BRA         L_end_get_direction
;Controller.c,158 :: 		}
L_get_direction36:
;Controller.c,159 :: 		if (axis_x < 0 && axis_y > 0) { // second quadrant
0x0508	0x0E80      	MOVLW       128
0x050A	0x1821      	XORWF       Controller_axis_x+3, 0 
0x050C	0x6E00      	MOVWF       R0 
0x050E	0x0E80      	MOVLW       128
0x0510	0x5C00      	SUBWF       R0, 0 
0x0512	0xE108      	BNZ         L__get_direction104
0x0514	0x0E00      	MOVLW       0
0x0516	0x5C20      	SUBWF       Controller_axis_x+2, 0 
0x0518	0xE105      	BNZ         L__get_direction104
0x051A	0x0E00      	MOVLW       0
0x051C	0x5C1F      	SUBWF       Controller_axis_x+1, 0 
0x051E	0xE102      	BNZ         L__get_direction104
0x0520	0x0E00      	MOVLW       0
0x0522	0x5C1E      	SUBWF       Controller_axis_x, 0 
L__get_direction104:
0x0524	0xB0D8      	BTFSC       STATUS, 0 
0x0526	0xD095      	BRA         L_get_direction41
0x0528	0x0E80      	MOVLW       128
0x052A	0x6E00      	MOVWF       R0 
0x052C	0x0E80      	MOVLW       128
0x052E	0x1825      	XORWF       Controller_axis_y+3, 0 
0x0530	0x5C00      	SUBWF       R0, 0 
0x0532	0xE108      	BNZ         L__get_direction105
0x0534	0x5024      	MOVF        Controller_axis_y+2, 0 
0x0536	0x0800      	SUBLW       0
0x0538	0xE105      	BNZ         L__get_direction105
0x053A	0x5023      	MOVF        Controller_axis_y+1, 0 
0x053C	0x0800      	SUBLW       0
0x053E	0xE102      	BNZ         L__get_direction105
0x0540	0x5022      	MOVF        Controller_axis_y, 0 
0x0542	0x0800      	SUBLW       0
L__get_direction105:
0x0544	0xB0D8      	BTFSC       STATUS, 0 
0x0546	0xD085      	BRA         L_get_direction41
L__get_direction55:
;Controller.c,160 :: 		if (axis_y * TRIG_SCALE < -axis_x * TAN_22_5) // angle less than 90 + 22.5 degrees
0x0548	0xF000C022  	MOVFF       Controller_axis_y, R0
0x054C	0xF001C023  	MOVFF       Controller_axis_y+1, R1
0x0550	0xF002C024  	MOVFF       Controller_axis_y+2, R2
0x0554	0xF003C025  	MOVFF       Controller_axis_y+3, R3
0x0558	0x0E10      	MOVLW       16
0x055A	0x6E04      	MOVWF       R4 
0x055C	0x0E27      	MOVLW       39
0x055E	0x6E05      	MOVWF       R5 
0x0560	0x0E00      	MOVLW       0
0x0562	0x6E06      	MOVWF       R6 
0x0564	0x0E00      	MOVLW       0
0x0566	0x6E07      	MOVWF       R7 
0x0568	0xDDC4      	RCALL       _Mul_32x32_U
0x056A	0xF02CC000  	MOVFF       R0, FLOC__get_direction
0x056E	0xF02DC001  	MOVFF       R1, FLOC__get_direction+1
0x0572	0xF02EC002  	MOVFF       R2, FLOC__get_direction+2
0x0576	0xF02FC003  	MOVFF       R3, FLOC__get_direction+3
0x057A	0x6A00      	CLRF        R0 
0x057C	0x6A01      	CLRF        R1 
0x057E	0x6A02      	CLRF        R2 
0x0580	0x6A03      	CLRF        R3 
0x0582	0x501E      	MOVF        Controller_axis_x, 0 
0x0584	0x5E00      	SUBWF       R0, 1 
0x0586	0x501F      	MOVF        Controller_axis_x+1, 0 
0x0588	0x5A01      	SUBWFB      R1, 1 
0x058A	0x5020      	MOVF        Controller_axis_x+2, 0 
0x058C	0x5A02      	SUBWFB      R2, 1 
0x058E	0x5021      	MOVF        Controller_axis_x+3, 0 
0x0590	0x5A03      	SUBWFB      R3, 1 
0x0592	0x0E2E      	MOVLW       46
0x0594	0x6E04      	MOVWF       R4 
0x0596	0x0E10      	MOVLW       16
0x0598	0x6E05      	MOVWF       R5 
0x059A	0x0E00      	MOVLW       0
0x059C	0x6E06      	MOVWF       R6 
0x059E	0x0E00      	MOVLW       0
0x05A0	0x6E07      	MOVWF       R7 
0x05A2	0xDDA7      	RCALL       _Mul_32x32_U
0x05A4	0x0E80      	MOVLW       128
0x05A6	0x182F      	XORWF       FLOC__get_direction+3, 0 
0x05A8	0x6E04      	MOVWF       R4 
0x05AA	0x0E80      	MOVLW       128
0x05AC	0x1803      	XORWF       R3, 0 
0x05AE	0x5C04      	SUBWF       R4, 0 
0x05B0	0xE108      	BNZ         L__get_direction106
0x05B2	0x5002      	MOVF        R2, 0 
0x05B4	0x5C2E      	SUBWF       FLOC__get_direction+2, 0 
0x05B6	0xE105      	BNZ         L__get_direction106
0x05B8	0x5001      	MOVF        R1, 0 
0x05BA	0x5C2D      	SUBWF       FLOC__get_direction+1, 0 
0x05BC	0xE102      	BNZ         L__get_direction106
0x05BE	0x5000      	MOVF        R0, 0 
0x05C0	0x5C2C      	SUBWF       FLOC__get_direction, 0 
L__get_direction106:
0x05C2	0xE203      	BC          L_get_direction42
;Controller.c,161 :: 		return WEST;
0x05C4	0x0E07      	MOVLW       7
0x05C6	0x6E00      	MOVWF       R0 
0x05C8	0xD175      	BRA         L_end_get_direction
L_get_direction42:
;Controller.c,162 :: 		if (-axis_x * TRIG_SCALE < axis_y * TAN_22_5) // angle more than 180 - 22.5 degrees
0x05CA	0x6A00      	CLRF        R0 
0x05CC	0x6A01      	CLRF        R1 
0x05CE	0x6A02      	CLRF        R2 
0x05D0	0x6A03      	CLRF        R3 
0x05D2	0x501E      	MOVF        Controller_axis_x, 0 
0x05D4	0x5E00      	SUBWF       R0, 1 
0x05D6	0x501F      	MOVF        Controller_axis_x+1, 0 
0x05D8	0x5A01      	SUBWFB      R1, 1 
0x05DA	0x5020      	MOVF        Controller_axis_x+2, 0 
0x05DC	0x5A02      	SUBWFB      R2, 1 
0x05DE	0x5021      	MOVF        Controller_axis_x+3, 0 
0x05E0	0x5A03      	SUBWFB      R3, 1 
0x05E2	0x0E10      	MOVLW       16
0x05E4	0x6E04      	MOVWF       R4 
0x05E6	0x0E27      	MOVLW       39
0x05E8	0x6E05      	MOVWF       R5 
0x05EA	0x0E00      	MOVLW       0
0x05EC	0x6E06      	MOVWF       R6 
0x05EE	0x0E00      	MOVLW       0
0x05F0	0x6E07      	MOVWF       R7 
0x05F2	0xDD7F      	RCALL       _Mul_32x32_U
0x05F4	0xF02CC000  	MOVFF       R0, FLOC__get_direction
0x05F8	0xF02DC001  	MOVFF       R1, FLOC__get_direction+1
0x05FC	0xF02EC002  	MOVFF       R2, FLOC__get_direction+2
0x0600	0xF02FC003  	MOVFF       R3, FLOC__get_direction+3
0x0604	0xF000C022  	MOVFF       Controller_axis_y, R0
0x0608	0xF001C023  	MOVFF       Controller_axis_y+1, R1
0x060C	0xF002C024  	MOVFF       Controller_axis_y+2, R2
0x0610	0xF003C025  	MOVFF       Controller_axis_y+3, R3
0x0614	0x0E2E      	MOVLW       46
0x0616	0x6E04      	MOVWF       R4 
0x0618	0x0E10      	MOVLW       16
0x061A	0x6E05      	MOVWF       R5 
0x061C	0x0E00      	MOVLW       0
0x061E	0x6E06      	MOVWF       R6 
0x0620	0x0E00      	MOVLW       0
0x0622	0x6E07      	MOVWF       R7 
0x0624	0xDD66      	RCALL       _Mul_32x32_U
0x0626	0x0E80      	MOVLW       128
0x0628	0x182F      	XORWF       FLOC__get_direction+3, 0 
0x062A	0x6E04      	MOVWF       R4 
0x062C	0x0E80      	MOVLW       128
0x062E	0x1803      	XORWF       R3, 0 
0x0630	0x5C04      	SUBWF       R4, 0 
0x0632	0xE108      	BNZ         L__get_direction107
0x0634	0x5002      	MOVF        R2, 0 
0x0636	0x5C2E      	SUBWF       FLOC__get_direction+2, 0 
0x0638	0xE105      	BNZ         L__get_direction107
0x063A	0x5001      	MOVF        R1, 0 
0x063C	0x5C2D      	SUBWF       FLOC__get_direction+1, 0 
0x063E	0xE102      	BNZ         L__get_direction107
0x0640	0x5000      	MOVF        R0, 0 
0x0642	0x5C2C      	SUBWF       FLOC__get_direction, 0 
L__get_direction107:
0x0644	0xE203      	BC          L_get_direction43
;Controller.c,163 :: 		return NORTH;
0x0646	0x0E01      	MOVLW       1
0x0648	0x6E00      	MOVWF       R0 
0x064A	0xD134      	BRA         L_end_get_direction
L_get_direction43:
;Controller.c,164 :: 		return NORTHWEST;
0x064C	0x0E08      	MOVLW       8
0x064E	0x6E00      	MOVWF       R0 
0x0650	0xD131      	BRA         L_end_get_direction
;Controller.c,165 :: 		}
L_get_direction41:
;Controller.c,166 :: 		if (axis_x < 0 && axis_y < 0) { // third quadrant
0x0652	0x0E80      	MOVLW       128
0x0654	0x1821      	XORWF       Controller_axis_x+3, 0 
0x0656	0x6E00      	MOVWF       R0 
0x0658	0x0E80      	MOVLW       128
0x065A	0x5C00      	SUBWF       R0, 0 
0x065C	0xE108      	BNZ         L__get_direction108
0x065E	0x0E00      	MOVLW       0
0x0660	0x5C20      	SUBWF       Controller_axis_x+2, 0 
0x0662	0xE105      	BNZ         L__get_direction108
0x0664	0x0E00      	MOVLW       0
0x0666	0x5C1F      	SUBWF       Controller_axis_x+1, 0 
0x0668	0xE102      	BNZ         L__get_direction108
0x066A	0x0E00      	MOVLW       0
0x066C	0x5C1E      	SUBWF       Controller_axis_x, 0 
L__get_direction108:
0x066E	0xB0D8      	BTFSC       STATUS, 0 
0x0670	0xD09D      	BRA         L_get_direction46
0x0672	0x0E80      	MOVLW       128
0x0674	0x1825      	XORWF       Controller_axis_y+3, 0 
0x0676	0x6E00      	MOVWF       R0 
0x0678	0x0E80      	MOVLW       128
0x067A	0x5C00      	SUBWF       R0, 0 
0x067C	0xE108      	BNZ         L__get_direction109
0x067E	0x0E00      	MOVLW       0
0x0680	0x5C24      	SUBWF       Controller_axis_y+2, 0 
0x0682	0xE105      	BNZ         L__get_direction109
0x0684	0x0E00      	MOVLW       0
0x0686	0x5C23      	SUBWF       Controller_axis_y+1, 0 
0x0688	0xE102      	BNZ         L__get_direction109
0x068A	0x0E00      	MOVLW       0
0x068C	0x5C22      	SUBWF       Controller_axis_y, 0 
L__get_direction109:
0x068E	0xB0D8      	BTFSC       STATUS, 0 
0x0690	0xD08D      	BRA         L_get_direction46
L__get_direction54:
;Controller.c,167 :: 		if (-axis_y * TRIG_SCALE < -axis_x * TAN_22_5) // angle less than 180 + 22.5 degrees
0x0692	0x6A00      	CLRF        R0 
0x0694	0x6A01      	CLRF        R1 
0x0696	0x6A02      	CLRF        R2 
0x0698	0x6A03      	CLRF        R3 
0x069A	0x5022      	MOVF        Controller_axis_y, 0 
0x069C	0x5E00      	SUBWF       R0, 1 
0x069E	0x5023      	MOVF        Controller_axis_y+1, 0 
0x06A0	0x5A01      	SUBWFB      R1, 1 
0x06A2	0x5024      	MOVF        Controller_axis_y+2, 0 
0x06A4	0x5A02      	SUBWFB      R2, 1 
0x06A6	0x5025      	MOVF        Controller_axis_y+3, 0 
0x06A8	0x5A03      	SUBWFB      R3, 1 
0x06AA	0x0E10      	MOVLW       16
0x06AC	0x6E04      	MOVWF       R4 
0x06AE	0x0E27      	MOVLW       39
0x06B0	0x6E05      	MOVWF       R5 
0x06B2	0x0E00      	MOVLW       0
0x06B4	0x6E06      	MOVWF       R6 
0x06B6	0x0E00      	MOVLW       0
0x06B8	0x6E07      	MOVWF       R7 
0x06BA	0xDD1B      	RCALL       _Mul_32x32_U
0x06BC	0xF02CC000  	MOVFF       R0, FLOC__get_direction
0x06C0	0xF02DC001  	MOVFF       R1, FLOC__get_direction+1
0x06C4	0xF02EC002  	MOVFF       R2, FLOC__get_direction+2
0x06C8	0xF02FC003  	MOVFF       R3, FLOC__get_direction+3
0x06CC	0x6A00      	CLRF        R0 
0x06CE	0x6A01      	CLRF        R1 
0x06D0	0x6A02      	CLRF        R2 
0x06D2	0x6A03      	CLRF        R3 
0x06D4	0x501E      	MOVF        Controller_axis_x, 0 
0x06D6	0x5E00      	SUBWF       R0, 1 
0x06D8	0x501F      	MOVF        Controller_axis_x+1, 0 
0x06DA	0x5A01      	SUBWFB      R1, 1 
0x06DC	0x5020      	MOVF        Controller_axis_x+2, 0 
0x06DE	0x5A02      	SUBWFB      R2, 1 
0x06E0	0x5021      	MOVF        Controller_axis_x+3, 0 
0x06E2	0x5A03      	SUBWFB      R3, 1 
0x06E4	0x0E2E      	MOVLW       46
0x06E6	0x6E04      	MOVWF       R4 
0x06E8	0x0E10      	MOVLW       16
0x06EA	0x6E05      	MOVWF       R5 
0x06EC	0x0E00      	MOVLW       0
0x06EE	0x6E06      	MOVWF       R6 
0x06F0	0x0E00      	MOVLW       0
0x06F2	0x6E07      	MOVWF       R7 
0x06F4	0xDCFE      	RCALL       _Mul_32x32_U
0x06F6	0x0E80      	MOVLW       128
0x06F8	0x182F      	XORWF       FLOC__get_direction+3, 0 
0x06FA	0x6E04      	MOVWF       R4 
0x06FC	0x0E80      	MOVLW       128
0x06FE	0x1803      	XORWF       R3, 0 
0x0700	0x5C04      	SUBWF       R4, 0 
0x0702	0xE108      	BNZ         L__get_direction110
0x0704	0x5002      	MOVF        R2, 0 
0x0706	0x5C2E      	SUBWF       FLOC__get_direction+2, 0 
0x0708	0xE105      	BNZ         L__get_direction110
0x070A	0x5001      	MOVF        R1, 0 
0x070C	0x5C2D      	SUBWF       FLOC__get_direction+1, 0 
0x070E	0xE102      	BNZ         L__get_direction110
0x0710	0x5000      	MOVF        R0, 0 
0x0712	0x5C2C      	SUBWF       FLOC__get_direction, 0 
L__get_direction110:
0x0714	0xE203      	BC          L_get_direction47
;Controller.c,168 :: 		return WEST;
0x0716	0x0E07      	MOVLW       7
0x0718	0x6E00      	MOVWF       R0 
0x071A	0xD0CC      	BRA         L_end_get_direction
L_get_direction47:
;Controller.c,169 :: 		if (-axis_x * TRIG_SCALE < -axis_y * TAN_22_5) // angle more than 270 - 22.5 degrees
0x071C	0x6A00      	CLRF        R0 
0x071E	0x6A01      	CLRF        R1 
0x0720	0x6A02      	CLRF        R2 
0x0722	0x6A03      	CLRF        R3 
0x0724	0x501E      	MOVF        Controller_axis_x, 0 
0x0726	0x5E00      	SUBWF       R0, 1 
0x0728	0x501F      	MOVF        Controller_axis_x+1, 0 
0x072A	0x5A01      	SUBWFB      R1, 1 
0x072C	0x5020      	MOVF        Controller_axis_x+2, 0 
0x072E	0x5A02      	SUBWFB      R2, 1 
0x0730	0x5021      	MOVF        Controller_axis_x+3, 0 
0x0732	0x5A03      	SUBWFB      R3, 1 
0x0734	0x0E10      	MOVLW       16
0x0736	0x6E04      	MOVWF       R4 
0x0738	0x0E27      	MOVLW       39
0x073A	0x6E05      	MOVWF       R5 
0x073C	0x0E00      	MOVLW       0
0x073E	0x6E06      	MOVWF       R6 
0x0740	0x0E00      	MOVLW       0
0x0742	0x6E07      	MOVWF       R7 
0x0744	0xDCD6      	RCALL       _Mul_32x32_U
0x0746	0xF02CC000  	MOVFF       R0, FLOC__get_direction
0x074A	0xF02DC001  	MOVFF       R1, FLOC__get_direction+1
0x074E	0xF02EC002  	MOVFF       R2, FLOC__get_direction+2
0x0752	0xF02FC003  	MOVFF       R3, FLOC__get_direction+3
0x0756	0x6A00      	CLRF        R0 
0x0758	0x6A01      	CLRF        R1 
0x075A	0x6A02      	CLRF        R2 
0x075C	0x6A03      	CLRF        R3 
0x075E	0x5022      	MOVF        Controller_axis_y, 0 
0x0760	0x5E00      	SUBWF       R0, 1 
0x0762	0x5023      	MOVF        Controller_axis_y+1, 0 
0x0764	0x5A01      	SUBWFB      R1, 1 
0x0766	0x5024      	MOVF        Controller_axis_y+2, 0 
0x0768	0x5A02      	SUBWFB      R2, 1 
0x076A	0x5025      	MOVF        Controller_axis_y+3, 0 
0x076C	0x5A03      	SUBWFB      R3, 1 
0x076E	0x0E2E      	MOVLW       46
0x0770	0x6E04      	MOVWF       R4 
0x0772	0x0E10      	MOVLW       16
0x0774	0x6E05      	MOVWF       R5 
0x0776	0x0E00      	MOVLW       0
0x0778	0x6E06      	MOVWF       R6 
0x077A	0x0E00      	MOVLW       0
0x077C	0x6E07      	MOVWF       R7 
0x077E	0xDCB9      	RCALL       _Mul_32x32_U
0x0780	0x0E80      	MOVLW       128
0x0782	0x182F      	XORWF       FLOC__get_direction+3, 0 
0x0784	0x6E04      	MOVWF       R4 
0x0786	0x0E80      	MOVLW       128
0x0788	0x1803      	XORWF       R3, 0 
0x078A	0x5C04      	SUBWF       R4, 0 
0x078C	0xE108      	BNZ         L__get_direction111
0x078E	0x5002      	MOVF        R2, 0 
0x0790	0x5C2E      	SUBWF       FLOC__get_direction+2, 0 
0x0792	0xE105      	BNZ         L__get_direction111
0x0794	0x5001      	MOVF        R1, 0 
0x0796	0x5C2D      	SUBWF       FLOC__get_direction+1, 0 
0x0798	0xE102      	BNZ         L__get_direction111
0x079A	0x5000      	MOVF        R0, 0 
0x079C	0x5C2C      	SUBWF       FLOC__get_direction, 0 
L__get_direction111:
0x079E	0xE203      	BC          L_get_direction48
;Controller.c,170 :: 		return SOUTH;
0x07A0	0x0E05      	MOVLW       5
0x07A2	0x6E00      	MOVWF       R0 
0x07A4	0xD087      	BRA         L_end_get_direction
L_get_direction48:
;Controller.c,171 :: 		return SOUTHWEST;
0x07A6	0x0E06      	MOVLW       6
0x07A8	0x6E00      	MOVWF       R0 
0x07AA	0xD084      	BRA         L_end_get_direction
;Controller.c,172 :: 		}
L_get_direction46:
;Controller.c,174 :: 		if (-axis_y * TRIG_SCALE < axis_x * TAN_22_5) // angle less than 270 + 22.5 degrees
0x07AC	0x6A00      	CLRF        R0 
0x07AE	0x6A01      	CLRF        R1 
0x07B0	0x6A02      	CLRF        R2 
0x07B2	0x6A03      	CLRF        R3 
0x07B4	0x5022      	MOVF        Controller_axis_y, 0 
0x07B6	0x5E00      	SUBWF       R0, 1 
0x07B8	0x5023      	MOVF        Controller_axis_y+1, 0 
0x07BA	0x5A01      	SUBWFB      R1, 1 
0x07BC	0x5024      	MOVF        Controller_axis_y+2, 0 
0x07BE	0x5A02      	SUBWFB      R2, 1 
0x07C0	0x5025      	MOVF        Controller_axis_y+3, 0 
0x07C2	0x5A03      	SUBWFB      R3, 1 
0x07C4	0x0E10      	MOVLW       16
0x07C6	0x6E04      	MOVWF       R4 
0x07C8	0x0E27      	MOVLW       39
0x07CA	0x6E05      	MOVWF       R5 
0x07CC	0x0E00      	MOVLW       0
0x07CE	0x6E06      	MOVWF       R6 
0x07D0	0x0E00      	MOVLW       0
0x07D2	0x6E07      	MOVWF       R7 
0x07D4	0xDC8E      	RCALL       _Mul_32x32_U
0x07D6	0xF02CC000  	MOVFF       R0, FLOC__get_direction
0x07DA	0xF02DC001  	MOVFF       R1, FLOC__get_direction+1
0x07DE	0xF02EC002  	MOVFF       R2, FLOC__get_direction+2
0x07E2	0xF02FC003  	MOVFF       R3, FLOC__get_direction+3
0x07E6	0xF000C01E  	MOVFF       Controller_axis_x, R0
0x07EA	0xF001C01F  	MOVFF       Controller_axis_x+1, R1
0x07EE	0xF002C020  	MOVFF       Controller_axis_x+2, R2
0x07F2	0xF003C021  	MOVFF       Controller_axis_x+3, R3
0x07F6	0x0E2E      	MOVLW       46
0x07F8	0x6E04      	MOVWF       R4 
0x07FA	0x0E10      	MOVLW       16
0x07FC	0x6E05      	MOVWF       R5 
0x07FE	0x0E00      	MOVLW       0
0x0800	0x6E06      	MOVWF       R6 
0x0802	0x0E00      	MOVLW       0
0x0804	0x6E07      	MOVWF       R7 
0x0806	0xDC75      	RCALL       _Mul_32x32_U
0x0808	0x0E80      	MOVLW       128
0x080A	0x182F      	XORWF       FLOC__get_direction+3, 0 
0x080C	0x6E04      	MOVWF       R4 
0x080E	0x0E80      	MOVLW       128
0x0810	0x1803      	XORWF       R3, 0 
0x0812	0x5C04      	SUBWF       R4, 0 
0x0814	0xE108      	BNZ         L__get_direction112
0x0816	0x5002      	MOVF        R2, 0 
0x0818	0x5C2E      	SUBWF       FLOC__get_direction+2, 0 
0x081A	0xE105      	BNZ         L__get_direction112
0x081C	0x5001      	MOVF        R1, 0 
0x081E	0x5C2D      	SUBWF       FLOC__get_direction+1, 0 
0x0820	0xE102      	BNZ         L__get_direction112
0x0822	0x5000      	MOVF        R0, 0 
0x0824	0x5C2C      	SUBWF       FLOC__get_direction, 0 
L__get_direction112:
0x0826	0xE203      	BC          L_get_direction49
;Controller.c,175 :: 		return EAST;
0x0828	0x0E03      	MOVLW       3
0x082A	0x6E00      	MOVWF       R0 
0x082C	0xD043      	BRA         L_end_get_direction
L_get_direction49:
;Controller.c,176 :: 		if (axis_x * TRIG_SCALE < -axis_y * TAN_22_5) // angle more than 360 - 22.5 degrees
0x082E	0xF000C01E  	MOVFF       Controller_axis_x, R0
0x0832	0xF001C01F  	MOVFF       Controller_axis_x+1, R1
0x0836	0xF002C020  	MOVFF       Controller_axis_x+2, R2
0x083A	0xF003C021  	MOVFF       Controller_axis_x+3, R3
0x083E	0x0E10      	MOVLW       16
0x0840	0x6E04      	MOVWF       R4 
0x0842	0x0E27      	MOVLW       39
0x0844	0x6E05      	MOVWF       R5 
0x0846	0x0E00      	MOVLW       0
0x0848	0x6E06      	MOVWF       R6 
0x084A	0x0E00      	MOVLW       0
0x084C	0x6E07      	MOVWF       R7 
0x084E	0xDC51      	RCALL       _Mul_32x32_U
0x0850	0xF02CC000  	MOVFF       R0, FLOC__get_direction
0x0854	0xF02DC001  	MOVFF       R1, FLOC__get_direction+1
0x0858	0xF02EC002  	MOVFF       R2, FLOC__get_direction+2
0x085C	0xF02FC003  	MOVFF       R3, FLOC__get_direction+3
0x0860	0x6A00      	CLRF        R0 
0x0862	0x6A01      	CLRF        R1 
0x0864	0x6A02      	CLRF        R2 
0x0866	0x6A03      	CLRF        R3 
0x0868	0x5022      	MOVF        Controller_axis_y, 0 
0x086A	0x5E00      	SUBWF       R0, 1 
0x086C	0x5023      	MOVF        Controller_axis_y+1, 0 
0x086E	0x5A01      	SUBWFB      R1, 1 
0x0870	0x5024      	MOVF        Controller_axis_y+2, 0 
0x0872	0x5A02      	SUBWFB      R2, 1 
0x0874	0x5025      	MOVF        Controller_axis_y+3, 0 
0x0876	0x5A03      	SUBWFB      R3, 1 
0x0878	0x0E2E      	MOVLW       46
0x087A	0x6E04      	MOVWF       R4 
0x087C	0x0E10      	MOVLW       16
0x087E	0x6E05      	MOVWF       R5 
0x0880	0x0E00      	MOVLW       0
0x0882	0x6E06      	MOVWF       R6 
0x0884	0x0E00      	MOVLW       0
0x0886	0x6E07      	MOVWF       R7 
0x0888	0xDC34      	RCALL       _Mul_32x32_U
0x088A	0x0E80      	MOVLW       128
0x088C	0x182F      	XORWF       FLOC__get_direction+3, 0 
0x088E	0x6E04      	MOVWF       R4 
0x0890	0x0E80      	MOVLW       128
0x0892	0x1803      	XORWF       R3, 0 
0x0894	0x5C04      	SUBWF       R4, 0 
0x0896	0xE108      	BNZ         L__get_direction113
0x0898	0x5002      	MOVF        R2, 0 
0x089A	0x5C2E      	SUBWF       FLOC__get_direction+2, 0 
0x089C	0xE105      	BNZ         L__get_direction113
0x089E	0x5001      	MOVF        R1, 0 
0x08A0	0x5C2D      	SUBWF       FLOC__get_direction+1, 0 
0x08A2	0xE102      	BNZ         L__get_direction113
0x08A4	0x5000      	MOVF        R0, 0 
0x08A6	0x5C2C      	SUBWF       FLOC__get_direction, 0 
L__get_direction113:
0x08A8	0xE203      	BC          L_get_direction50
;Controller.c,177 :: 		return SOUTH;
0x08AA	0x0E05      	MOVLW       5
0x08AC	0x6E00      	MOVWF       R0 
0x08AE	0xD002      	BRA         L_end_get_direction
L_get_direction50:
;Controller.c,178 :: 		return SOUTHEAST;
0x08B0	0x0E04      	MOVLW       4
0x08B2	0x6E00      	MOVWF       R0 
;Controller.c,179 :: 		}
L_end_get_direction:
0x08B4	0x0012      	RETURN      0
; end of _get_direction
_get_magnetometer:
;Controller.c,89 :: 		void get_magnetometer(int *x, int *y, int *z) {
;Controller.c,91 :: 		I2C1_Start();
0x08B6	0xDC46      	RCALL       _I2C1_Start
;Controller.c,92 :: 		I2C1_Wr(MAGNETOMETER_WRITE); // write to magnetometer
0x08B8	0x0E3C      	MOVLW       60
0x08BA	0x6E30      	MOVWF       FARG_I2C1_Wr_data_ 
0x08BC	0xF000EC46  	CALL        _I2C1_Wr, 0
;Controller.c,93 :: 		I2C1_Wr(0x02); // write to mode register
0x08C0	0x0E02      	MOVLW       2
0x08C2	0x6E30      	MOVWF       FARG_I2C1_Wr_data_ 
0x08C4	0xF000EC46  	CALL        _I2C1_Wr, 0
;Controller.c,94 :: 		I2C1_Wr(0b00000001); // single measurement mode
0x08C8	0x0E01      	MOVLW       1
0x08CA	0x6E30      	MOVWF       FARG_I2C1_Wr_data_ 
0x08CC	0xF000EC46  	CALL        _I2C1_Wr, 0
;Controller.c,95 :: 		I2C1_Stop();
0x08D0	0xF000EC57  	CALL        _I2C1_Stop, 0
;Controller.c,97 :: 		delay_ms(150); // wait for the magnetometer to make a reading
0x08D4	0x0E31      	MOVLW       49
0x08D6	0x6E0C      	MOVWF       R12, 0
0x08D8	0x0EB2      	MOVLW       178
0x08DA	0x6E0D      	MOVWF       R13, 0
L_get_magnetometer0:
0x08DC	0x2E0D      	DECFSZ      R13, 1, 0
0x08DE	0xD7FE      	BRA         L_get_magnetometer0
0x08E0	0x2E0C      	DECFSZ      R12, 1, 0
0x08E2	0xD7FC      	BRA         L_get_magnetometer0
0x08E4	0x0000      	NOP
;Controller.c,100 :: 		I2C1_Start();
0x08E6	0xDC2E      	RCALL       _I2C1_Start
;Controller.c,101 :: 		I2C1_Wr(MAGNETOMETER_READ); // read from magnetometer
0x08E8	0x0E3D      	MOVLW       61
0x08EA	0x6E30      	MOVWF       FARG_I2C1_Wr_data_ 
0x08EC	0xF000EC46  	CALL        _I2C1_Wr, 0
;Controller.c,102 :: 		*x = (I2C1_Rd(1) << 8) | I2C1_Rd(1);
0x08F0	0x0E01      	MOVLW       1
0x08F2	0x6E30      	MOVWF       FARG_I2C1_Rd_ack 
0x08F4	0xF000EC59  	CALL        _I2C1_Rd, 0
0x08F8	0xF02DC000  	MOVFF       R0, FLOC__get_magnetometer+1
0x08FC	0x6A2C      	CLRF        FLOC__get_magnetometer 
0x08FE	0x0E01      	MOVLW       1
0x0900	0x6E30      	MOVWF       FARG_I2C1_Rd_ack 
0x0902	0xF000EC59  	CALL        _I2C1_Rd, 0
0x0906	0x0E00      	MOVLW       0
0x0908	0x6E01      	MOVWF       R1 
0x090A	0x502C      	MOVF        FLOC__get_magnetometer, 0 
0x090C	0x1200      	IORWF       R0, 1 
0x090E	0x502D      	MOVF        FLOC__get_magnetometer+1, 0 
0x0910	0x1201      	IORWF       R1, 1 
0x0912	0xFFE1C026  	MOVFF       FARG_get_magnetometer_x, FSR1L
0x0916	0xFFE2C027  	MOVFF       FARG_get_magnetometer_x+1, FSR1H
0x091A	0xFFE6C000  	MOVFF       R0, POSTINC1
0x091E	0xFFE6C001  	MOVFF       R1, POSTINC1
;Controller.c,103 :: 		*z = (I2C1_Rd(1) << 8) | I2C1_Rd(1);
0x0922	0x0E01      	MOVLW       1
0x0924	0x6E30      	MOVWF       FARG_I2C1_Rd_ack 
0x0926	0xF000EC59  	CALL        _I2C1_Rd, 0
0x092A	0xF02DC000  	MOVFF       R0, FLOC__get_magnetometer+1
0x092E	0x6A2C      	CLRF        FLOC__get_magnetometer 
0x0930	0x0E01      	MOVLW       1
0x0932	0x6E30      	MOVWF       FARG_I2C1_Rd_ack 
0x0934	0xF000EC59  	CALL        _I2C1_Rd, 0
0x0938	0x0E00      	MOVLW       0
0x093A	0x6E01      	MOVWF       R1 
0x093C	0x502C      	MOVF        FLOC__get_magnetometer, 0 
0x093E	0x1200      	IORWF       R0, 1 
0x0940	0x502D      	MOVF        FLOC__get_magnetometer+1, 0 
0x0942	0x1201      	IORWF       R1, 1 
0x0944	0xFFE1C02A  	MOVFF       FARG_get_magnetometer_z, FSR1L
0x0948	0xFFE2C02B  	MOVFF       FARG_get_magnetometer_z+1, FSR1H
0x094C	0xFFE6C000  	MOVFF       R0, POSTINC1
0x0950	0xFFE6C001  	MOVFF       R1, POSTINC1
;Controller.c,104 :: 		*y = (I2C1_Rd(1) << 8) | I2C1_Rd(0); // we always NACK the last value to indicate that we are done reading
0x0954	0x0E01      	MOVLW       1
0x0956	0x6E30      	MOVWF       FARG_I2C1_Rd_ack 
0x0958	0xF000EC59  	CALL        _I2C1_Rd, 0
0x095C	0xF02DC000  	MOVFF       R0, FLOC__get_magnetometer+1
0x0960	0x6A2C      	CLRF        FLOC__get_magnetometer 
0x0962	0x6A30      	CLRF        FARG_I2C1_Rd_ack 
0x0964	0xF000EC59  	CALL        _I2C1_Rd, 0
0x0968	0x0E00      	MOVLW       0
0x096A	0x6E01      	MOVWF       R1 
0x096C	0x502C      	MOVF        FLOC__get_magnetometer, 0 
0x096E	0x1200      	IORWF       R0, 1 
0x0970	0x502D      	MOVF        FLOC__get_magnetometer+1, 0 
0x0972	0x1201      	IORWF       R1, 1 
0x0974	0xFFE1C028  	MOVFF       FARG_get_magnetometer_y, FSR1L
0x0978	0xFFE2C029  	MOVFF       FARG_get_magnetometer_y+1, FSR1H
0x097C	0xFFE6C000  	MOVFF       R0, POSTINC1
0x0980	0xFFE6C001  	MOVFF       R1, POSTINC1
;Controller.c,105 :: 		I2C1_Stop();
0x0984	0xF000EC57  	CALL        _I2C1_Stop, 0
;Controller.c,106 :: 		}
L_end_get_magnetometer:
0x0988	0x0012      	RETURN      0
; end of _get_magnetometer
_main:
0x098A	0x6A17      	CLRF        _magnetic_x 
0x098C	0x6A18      	CLRF        24 
0x098E	0x6A19      	CLRF        _magnetic_y 
0x0990	0x6A1A      	CLRF        26 
0x0992	0x6A1B      	CLRF        _magnetic_z 
0x0994	0x6A1C      	CLRF        28 
0x0996	0x0E01      	MOVLW       1
0x0998	0x6E1D      	MOVWF       Controller_magnetometer_uninitialized 
;Controller.c,75 :: 		void main() {
;Controller.c,76 :: 		CM1CON0 = CM2CON0 = 0b111; // comparator configuration
0x099A	0x0E07      	MOVLW       7
0x099C	0x6E6B      	MOVWF       CM2CON0 
0x099E	0xFF6DCF6B  	MOVFF       CM2CON0, CM1CON0
;Controller.c,77 :: 		ANSEL = ANSELH = 0; // use digital I/O
0x09A2	0x6A7F      	CLRF        ANSELH 
0x09A4	0x6A7E      	CLRF        ANSEL 
;Controller.c,78 :: 		IDLEN_bit = 1; // enable Idle mode when sleeping (timer1 only works in normal and idle mode)
0x09A6	0x8ED3      	BSF         IDLEN_bit, BitPos(IDLEN_bit+0) 
;Controller.c,80 :: 		TRISC = 0x00; // PORTC as output
0x09A8	0x6A94      	CLRF        TRISC 
;Controller.c,81 :: 		MOTOR1 = MOTOR2 = MOTOR3 = MOTOR4 = MOTOR5 = MOTOR6 = 0; // reset port state
0x09AA	0x9482      	BCF         RC2_bit, BitPos(RC2_bit+0) 
0x09AC	0xB482      	BTFSC       RC2_bit, BitPos(RC2_bit+0) 
0x09AE	0xD002      	BRA         L__main62
0x09B0	0x9A82      	BCF         RC5_bit, BitPos(RC5_bit+0) 
0x09B2	0xD001      	BRA         L__main63
L__main62:
0x09B4	0x8A82      	BSF         RC5_bit, BitPos(RC5_bit+0) 
L__main63:
0x09B6	0xBA82      	BTFSC       RC5_bit, BitPos(RC5_bit+0) 
0x09B8	0xD002      	BRA         L__main64
0x09BA	0x9882      	BCF         RC4_bit, BitPos(RC4_bit+0) 
0x09BC	0xD001      	BRA         L__main65
L__main64:
0x09BE	0x8882      	BSF         RC4_bit, BitPos(RC4_bit+0) 
L__main65:
0x09C0	0xB882      	BTFSC       RC4_bit, BitPos(RC4_bit+0) 
0x09C2	0xD002      	BRA         L__main66
0x09C4	0x9682      	BCF         RC3_bit, BitPos(RC3_bit+0) 
0x09C6	0xD001      	BRA         L__main67
L__main66:
0x09C8	0x8682      	BSF         RC3_bit, BitPos(RC3_bit+0) 
L__main67:
0x09CA	0xB682      	BTFSC       RC3_bit, BitPos(RC3_bit+0) 
0x09CC	0xD002      	BRA         L__main68
0x09CE	0x9C82      	BCF         RC6_bit, BitPos(RC6_bit+0) 
0x09D0	0xD001      	BRA         L__main69
L__main68:
0x09D2	0x8C82      	BSF         RC6_bit, BitPos(RC6_bit+0) 
L__main69:
0x09D4	0xBC82      	BTFSC       RC6_bit, BitPos(RC6_bit+0) 
0x09D6	0xD002      	BRA         L__main70
0x09D8	0x9E82      	BCF         RC7_bit, BitPos(RC7_bit+0) 
0x09DA	0xD001      	BRA         L__main71
L__main70:
0x09DC	0x8E82      	BSF         RC7_bit, BitPos(RC7_bit+0) 
L__main71:
;Controller.c,84 :: 		PORTC = 0xFF;
0x09DE	0x0EFF      	MOVLW       255
0x09E0	0x6E82      	MOVWF       PORTC 
;Controller.c,86 :: 		asm sleep; // go into idle mode, later to be woken up by timer1
0x09E2	0x0003      	SLEEP
;Controller.c,87 :: 		}
L_end_main:
0x09E4	0xD7FF      	BRA         $+0
; end of _main
Symbol List:
//** Routines locations **
//ADDRESS    SIZE    PROCEDURE
//----------------------------------------------
0x0008     [106]    _interrupt
0x0072      [26]    _I2C1_Is_Idle
0x008C      [34]    _I2C1_Wr
0x00AE       [4]    _I2C1_Stop
0x00B2      [42]    _I2C1_Rd
0x00DC      [22]    _I2C1_Init
0x00F2      [82]    _Mul_32x32_U
0x0144      [60]    _I2C1_Start
0x0180      [32]    _init_magnetometer
0x01A0      [16]    ___CC2DW
0x01B0     [280]    _notify
0x02C8    [1518]    _get_direction
0x08B6     [212]    _get_magnetometer
0x098A      [92]    _main
//** Variables locations ** 
//ADDRESS    SIZE    VARIABLE
//----------------------------------------------
0x0000       [1]    R0
0x0000       [1]    EEPROM_Write_SaveINTCON_L0
0x0001       [1]    ispunct_rslt_L0
0x0001       [1]    __Lib_PS2_Wait_Falling_nsample_L0
0x0001       [1]    I2C1_Rd_tmp_L0
0x0001       [1]    R1
0x0002       [1]    R2
0x0002       [2]    memset_pp_L0
0x0002       [2]    strlen_cp_L0
0x0002       [2]    memchr_s_L0
0x0002       [2]    memcpy_dd_L0
0x0003       [1]    R3
0x0003       [2]    Ltrim_original_L0
0x0003       [2]    memmove_tt_L0
0x0004       [2]    strcpy_cp_L0
0x0004       [1]    R4
0x0004       [2]    memcpy_ss_L0
0x0004       [2]    strcat_cp_L0
0x0004       [2]    strncat_cp_L0
0x0004       [2]    strncpy_cp_L0
0x0005       [2]    memmove_ff_L0
0x0005       [2]    LongIntToHex_input_half_L0
0x0005       [2]    Ltrim_p_L0
0x0005       [2]    LongWordToHex_input_half_L0
0x0005       [1]    R5
0x0006       [1]    R6
0x0007       [1]    R7
0x0008       [1]    R8
0x0009       [1]    R9
0x000A       [1]    R10
0x000B       [1]    R11
0x000C       [1]    R12
0x000D       [1]    R13
0x000E       [1]    R14
0x000F       [1]    R15
0x0010       [1]    R16
0x0011       [1]    R17
0x0012       [1]    R18
0x0013       [1]    R19
0x0014       [1]    R20
0x0017       [2]    _magnetic_x
0x0019       [2]    _magnetic_y
0x001B       [2]    _magnetic_z
0x001D       [1]    Controller_magnetometer_uninitialized
0x001E       [4]    Controller_axis_x
0x0022       [4]    Controller_axis_y
0x0026       [2]    FARG_get_direction_x
0x0026       [2]    FARG_notify_index
0x0026       [2]    FARG_get_magnetometer_x
0x0028       [2]    FARG_get_direction_y
0x0028       [2]    FARG_get_magnetometer_y
0x002A       [2]    FARG_get_direction_z
0x002A       [2]    FARG_get_magnetometer_z
0x002C       [2]    FLOC__get_magnetometer
0x002C       [4]    FLOC__get_direction
0x0030       [2]    I2C1_Start_j_L0
0x0030       [1]    FARG_I2C1_Rd_ack
0x0030       [1]    FARG_I2C1_Wr_data_
0x0030       [4]    FARG_I2C1_Init_clock
0x0F6B       [1]    CM2CON0
0x0F6D       [1]    CM1CON0
0x0F7E       [1]    ANSEL
0x0F7F       [1]    ANSELH
0x0F81       [1]    PORTB
0x0F82       [0]    RC3_bit
0x0F82       [1]    PORTC
0x0F82       [0]    RC1_bit
0x0F82       [0]    RC4_bit
0x0F82       [0]    RC6_bit
0x0F82       [0]    RC2_bit
0x0F82       [0]    RC0_bit
0x0F82       [0]    RC5_bit
0x0F82       [0]    RC7_bit
0x0F8A       [0]    LATB4_bit
0x0F8A       [0]    LATB6_bit
0x0F93       [0]    TRISB4_bit
0x0F93       [0]    TRISB6_bit
0x0F93       [1]    TRISB
0x0F94       [1]    TRISC
0x0F9E       [0]    TMR1IF_bit
0x0F9E       [1]    PIR1
0x0FC5       [1]    SSPCON2
0x0FC6       [1]    SSPCON1
0x0FC7       [1]    SSPSTAT
0x0FC8       [1]    SSPADD
0x0FC9       [1]    SSPBUF
0x0FCE       [1]    TMR1L
0x0FCF       [1]    TMR1H
0x0FD3       [0]    IDLEN_bit
0x0FD8       [1]    STATUS
0x0FD9       [1]    FSR2L
0x0FDA       [1]    FSR2H
0x0FDE       [1]    POSTINC2
0x0FE0       [1]    BSR
0x0FE1       [1]    FSR1L
0x0FE2       [1]    FSR1H
0x0FE4       [1]    PREINC1
0x0FE6       [1]    POSTINC1
0x0FE7       [1]    INDF1
0x0FE8       [1]    WREG
0x0FE9       [1]    FSR0L
0x0FEA       [1]    FSR0H
0x0FEE       [1]    POSTINC0
0x0FF3       [1]    PRODL
0x0FF4       [1]    PRODH
0x0FF5       [1]    TABLAT
0x0FF6       [1]    TBLPTRL
0x0FF7       [1]    TBLPTRH
0x0FF8       [1]    TBLPTRU
//** Label List: ** 
//----------------------------------------------
  L_get_magnetometer0
  L_notify1
  L_notify2
  L_notify3
  L_notify4
  L_notify5
  L_notify6
  L_notify7
  L_notify8
  L_notify9
  L_notify10
  L_notify11
  L_notify12
  L_notify13
  L_notify14
  L_notify15
  L_notify16
  L_notify17
  L_notify18
  L_notify19
  L_notify20
  L_notify21
  L_get_direction22
  L_get_direction23
  L_get_direction24
  L_get_direction25
  L_get_direction26
  L_get_direction27
  L_get_direction28
  L_get_direction29
  L_get_direction30
  L_get_direction31
  L_get_direction32
  L_get_direction33
  L_get_direction34
  L_get_direction35
  L_get_direction36
  L_get_direction37
  L_get_direction38
  L_get_direction39
  L_get_direction40
  L_get_direction41
  L_get_direction42
  L_get_direction43
  L_get_direction44
  L_get_direction45
  L_get_direction46
  L_get_direction47
  L_get_direction48
  L_get_direction49
  L_get_direction50
  L_interrupt51
  L_interrupt52
  L_interrupt53
  L__get_direction54
  L__get_direction55
  L__get_direction56
  L__get_direction57
  L__get_direction58
  L_end_init_magnetometer
  _init_magnetometer
  L_end_init_timer1
  _init_timer1
  L_end_main
  _main
  L__main62
  L__main63
  L__main64
  L__main65
  L__main66
  L__main67
  L__main68
  L__main69
  L__main70
  L__main71
  L_end_get_magnetometer
  _get_magnetometer
  L_end_notify
  _notify
  L__notify74
  L__notify75
  L__notify76
  L__notify77
  L__notify78
  L__notify79
  L__notify80
  L__notify81
  L__notify82
  L__notify83
  L__notify84
  L__notify85
  L__notify86
  L__notify87
  L__notify88
  L__notify89
  L_end_get_direction
  _get_direction
  L__get_direction91
  L__get_direction92
  L__get_direction93
  L__get_direction94
  L__get_direction95
  L__get_direction96
  L__get_direction97
  L__get_direction98
  L__get_direction99
  L__get_direction100
  L__get_direction101
  L__get_direction102
  L__get_direction103
  L__get_direction104
  L__get_direction105
  L__get_direction106
  L__get_direction107
  L__get_direction108
  L__get_direction109
  L__get_direction110
  L__get_direction111
  L__get_direction112
  L__get_direction113
  L_end_interrupt
  _interrupt
  L__interrupt115
  _CC2D_Loop1
  _CC2DL_Loop1
  L_loopCA2AWs
  L_loopCCA2AWs
  L_loopCS2Ss
  L_CS2Send
  L_loopCCS2Ss
  L_CCS2Send
  L_loopFZinSWs
  L_longjmp7
  L_end___CC2D
  ___CC2D
  L_end___CC2DW
  ___CC2DW
  L_end___CA2AW
  ___CA2AW
  L_end___CCA2AW
  ___CCA2AW
  L_end___CS2S
  ___CS2S
  L_end___CCS2S
  ___CCS2S
  L_end___FZinS
  ___FZinS
  L_end_____DoIFC
  _____DoIFC
  L_end_Swap
  _Swap
  L_end_setjmp
  _setjmp
  L_end_longjmp
  _longjmp
  L_get_magnetometer0
  L_notify1
  L_notify2
  L_notify3
  L_notify4
  L_notify5
  L_notify6
  L_notify7
  L_notify8
  L_notify9
  L_notify10
  L_notify11
  L_notify12
  L_notify13
  L_notify14
  L_notify15
  L_notify16
  L_notify17
  L_notify18
  L_notify19
  L_notify20
  L_notify21
  L_get_direction22
  L_get_direction23
  L_get_direction24
  L_get_direction25
  L_get_direction26
  L_get_direction27
  L_get_direction28
  L_get_direction29
  L_get_direction30
  L_get_direction31
  L_get_direction32
  L_get_direction33
  L_get_direction34
  L_get_direction35
  L_get_direction36
  L_get_direction37
  L_get_direction38
  L_get_direction39
  L_get_direction40
  L_get_direction41
  L_get_direction42
  L_get_direction43
  L_get_direction44
  L_get_direction45
  L_get_direction46
  L_get_direction47
  L_get_direction48
  L_get_direction49
  L_get_direction50
  L_interrupt51
  L_interrupt52
  L_interrupt53
  L__get_direction54
  L__get_direction55
  L__get_direction56
  L__get_direction57
  L__get_direction58
  L_end_init_magnetometer
  _init_magnetometer
  L_end_init_timer1
  _init_timer1
  L_end_main
  _main
  L__main62
  L__main63
  L__main64
  L__main65
  L__main66
  L__main67
  L__main68
  L__main69
  L__main70
  L__main71
  L_end_get_magnetometer
  _get_magnetometer
  L_end_notify
  _notify
  L__notify74
  L__notify75
  L__notify76
  L__notify77
  L__notify78
  L__notify79
  L__notify80
  L__notify81
  L__notify82
  L__notify83
  L__notify84
  L__notify85
  L__notify86
  L__notify87
  L__notify88
  L__notify89
  L_end_get_direction
  _get_direction
  L__get_direction91
  L__get_direction92
  L__get_direction93
  L__get_direction94
  L__get_direction95
  L__get_direction96
  L__get_direction97
  L__get_direction98
  L__get_direction99
  L__get_direction100
  L__get_direction101
  L__get_direction102
  L__get_direction103
  L__get_direction104
  L__get_direction105
  L__get_direction106
  L__get_direction107
  L__get_direction108
  L__get_direction109
  L__get_direction110
  L__get_direction111
  L__get_direction112
  L__get_direction113
  L_end_interrupt
  _interrupt
  L__interrupt115
  L_I2C1_Is_Idle0
  L_I2C1_Is_Idle1
  L_I2C1_Start2
  L_I2C1_Start3
  L_I2C1_Start4
  L_I2C1_Start5
  L_I2C1_Start6
  L_I2C1_Start7
  L_I2C1_Start8
  L_I2C1_Start9
  L_I2C1_Repeated_Start10
  L_I2C1_Repeated_Start11
  L_I2C1_Rd12
  L_I2C1_Rd13
  L_I2C1_Rd14
  L_I2C1_Rd15
  L_I2C1_Rd16
  L_I2C1_Rd17
  L_I2C1_Wr18
  L_I2C1_Wr19
  L_I2C1_Wr20
  L_I2C1_Wr21
  L_I2C1_Wr22
  L_I2C1_Wr23
  L_end_I2C1_Init
  _I2C1_Init
  L_end_I2C1_Is_Idle
  _I2C1_Is_Idle
  L_end_I2C1_Start
  _I2C1_Start
  L__I2C1_Start27
  L__I2C1_Start28
  L_end_I2C1_Repeated_Start
  _I2C1_Repeated_Start
  L_end_I2C1_Rd
  _I2C1_Rd
  L_end_I2C1_Wr
  _I2C1_Wr
  L_end_I2C1_Stop
  _I2C1_Stop
  L_Div_16x16_S0
  L_Div_16x16_S1
  LOOPS3232A
  SADD22LA
  SOK22LA
  SADD22L8
  SOK22L8
  LOOPS3232B
  SADD22LB
  SOK22LB
  SADD22L16
  SOK22L16
  LOOPS3232C
  SADD22LC
  SOK22LC
  SADD22L24
  SOK22L24
  LOOPS3232D
  SADD22LD
  SOK22LD
  SOK22L
  L_Div_32x32_S6
  L_Div_32x32_S7
  L_Div_32x32_S8
  L_Div_32x32_S9
  FXD3232S
  END_ALL
  CA3232S
  C3232SX
  C3232SX1
  C3232S
  C3232S2
  C3232SX4
  C3232SOK
  C3232SX3
  C3232SX2
  avoid_comfrem
  LOOPU3232A
  UADD22LA
  UOK22LA
  UADD22L8
  UOK22L8
  LOOPU3232B
  UADD22LB
  UOK22LB
  UADD22L16
  UOK22L16
  LOOPU3232C
  UADD22LC
  UOK22LC
  UADD22L24
  UOK22L24
  LOOPU3232D
  UADD22LD
  UOK22LD
  UOK22L
  _NEXT
  _EXIT2
  _LOOP
  _EXIT1
  _IF_FIRST
  _IF_SECOND
  _INVERCE_FIRST
  _MULT
  _INBERSE_SECOND
  _EXIT
  L_end_Div_8x8_U
  _Div_8x8_U
  L_end_Div_16x16_U
  _Div_16x16_U
  L_end_Div_16x16_S_L
  _Div_16x16_S_L
  L_end_Div_16x16_S
  _Div_16x16_S
  L_end_Div_8x8_S
  _Div_8x8_S
  L_end_Mul_8x8_S
  _Mul_8x8_S
  L_end_Mul_16x16_U
  _Mul_16x16_U
  L_end_Mul_16x16_S
  _Mul_16x16_S
  L_end_SDIV3232L
  _SDIV3232L
  L_end_COMFREM
  _COMFREM
  L_end_Div_32x32_S
  _Div_32x32_S
  L_end_Div_32x32_U
  _Div_32x32_U
  L_end_Mul_32x32_U
  _Mul_32x32_U
  L_end_Mul_32x32_S
  _Mul_32x32_S
